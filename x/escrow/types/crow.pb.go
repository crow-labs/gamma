// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: escrow/crow.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Crow struct {
	ListingId        string       `protobuf:"bytes,1,opt,name=listingId,proto3" json:"listingId,omitempty"`
	OrderId          string       `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`
	BuyerId          string       `protobuf:"bytes,3,opt,name=buyerId,proto3" json:"buyerId,omitempty"`
	SellerId         string       `protobuf:"bytes,4,opt,name=sellerId,proto3" json:"sellerId,omitempty"`
	BuyerCollateral  []types.Coin `protobuf:"bytes,5,rep,name=buyerCollateral,proto3" json:"buyerCollateral"`
	SellerCollateral []types.Coin `protobuf:"bytes,6,rep,name=sellerCollateral,proto3" json:"sellerCollateral"`
	BuyerFunds       []types.Coin `protobuf:"bytes,7,rep,name=buyerFunds,proto3" json:"buyerFunds"`
	Status           string       `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	Timeout          []string     `protobuf:"bytes,9,rep,name=timeout,proto3" json:"timeout,omitempty"`
	DisputeId        string       `protobuf:"bytes,10,opt,name=disputeId,proto3" json:"disputeId,omitempty"`
	Creator          string       `protobuf:"bytes,11,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Crow) Reset()         { *m = Crow{} }
func (m *Crow) String() string { return proto.CompactTextString(m) }
func (*Crow) ProtoMessage()    {}
func (*Crow) Descriptor() ([]byte, []int) {
	return fileDescriptor_e183fe88f92613f0, []int{0}
}
func (m *Crow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Crow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Crow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Crow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Crow.Merge(m, src)
}
func (m *Crow) XXX_Size() int {
	return m.Size()
}
func (m *Crow) XXX_DiscardUnknown() {
	xxx_messageInfo_Crow.DiscardUnknown(m)
}

var xxx_messageInfo_Crow proto.InternalMessageInfo

func (m *Crow) GetListingId() string {
	if m != nil {
		return m.ListingId
	}
	return ""
}

func (m *Crow) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *Crow) GetBuyerId() string {
	if m != nil {
		return m.BuyerId
	}
	return ""
}

func (m *Crow) GetSellerId() string {
	if m != nil {
		return m.SellerId
	}
	return ""
}

func (m *Crow) GetBuyerCollateral() []types.Coin {
	if m != nil {
		return m.BuyerCollateral
	}
	return nil
}

func (m *Crow) GetSellerCollateral() []types.Coin {
	if m != nil {
		return m.SellerCollateral
	}
	return nil
}

func (m *Crow) GetBuyerFunds() []types.Coin {
	if m != nil {
		return m.BuyerFunds
	}
	return nil
}

func (m *Crow) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Crow) GetTimeout() []string {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *Crow) GetDisputeId() string {
	if m != nil {
		return m.DisputeId
	}
	return ""
}

func (m *Crow) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*Crow)(nil), "crowlabs.gamma.escrow.Crow")
}

func init() { proto.RegisterFile("escrow/crow.proto", fileDescriptor_e183fe88f92613f0) }

var fileDescriptor_e183fe88f92613f0 = []byte{
	// 367 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xcd, 0x6a, 0xe3, 0x30,
	0x18, 0xb4, 0xd7, 0xd9, 0xfc, 0x28, 0x87, 0xdd, 0x15, 0xbb, 0x8b, 0x36, 0x2c, 0x6e, 0xe8, 0x29,
	0x3d, 0x54, 0x22, 0xed, 0x03, 0x14, 0x62, 0x28, 0x98, 0xde, 0x72, 0xec, 0x4d, 0xb6, 0x85, 0x6b,
	0xb0, 0xfd, 0x05, 0x49, 0x6e, 0x9a, 0xb7, 0xe8, 0xdb, 0xf4, 0x15, 0x72, 0xcc, 0xb1, 0xa7, 0x52,
	0x92, 0x17, 0x29, 0x92, 0xdc, 0x34, 0xb4, 0x97, 0x5c, 0x8c, 0xe6, 0x9b, 0x6f, 0x86, 0xcf, 0xc3,
	0xa0, 0x5f, 0x42, 0xa5, 0x12, 0x96, 0xcc, 0x7c, 0xe8, 0x42, 0x82, 0x06, 0xfc, 0xc7, 0xbc, 0x4b,
	0x9e, 0x28, 0x9a, 0xf3, 0xaa, 0xe2, 0xd4, 0x6d, 0x8c, 0x7e, 0xe7, 0x90, 0x83, 0xdd, 0x60, 0xe6,
	0xe5, 0x96, 0x47, 0x61, 0x0a, 0xaa, 0x02, 0xc5, 0x12, 0xae, 0x04, 0xbb, 0x9f, 0x26, 0x42, 0xf3,
	0x29, 0x4b, 0xa1, 0xa8, 0x1d, 0x7f, 0xfa, 0x14, 0xa0, 0x4e, 0x24, 0x61, 0x89, 0xff, 0xa3, 0x41,
	0x59, 0x28, 0x5d, 0xd4, 0x79, 0x9c, 0x11, 0x7f, 0xec, 0x4f, 0x06, 0xf3, 0x8f, 0x01, 0x26, 0xa8,
	0x07, 0x32, 0x13, 0x32, 0xce, 0xc8, 0x37, 0xcb, 0xbd, 0x43, 0xc3, 0x24, 0xcd, 0xca, 0x32, 0x81,
	0x63, 0x5a, 0x88, 0x47, 0xa8, 0xaf, 0x44, 0x59, 0x5a, 0xaa, 0x63, 0xa9, 0x3d, 0xc6, 0x31, 0xfa,
	0x61, 0xd7, 0x22, 0x28, 0x4b, 0xae, 0x85, 0xe4, 0x25, 0xf9, 0x3e, 0x0e, 0x26, 0xc3, 0x8b, 0x7f,
	0xd4, 0x1d, 0x4c, 0xcd, 0xc1, 0xb4, 0x3d, 0x98, 0x46, 0x50, 0xd4, 0xb3, 0xce, 0xfa, 0xe5, 0xc4,
	0x9b, 0x7f, 0xd6, 0xe1, 0x1b, 0xf4, 0xd3, 0xd9, 0x1e, 0x78, 0x75, 0x8f, 0xf3, 0xfa, 0x22, 0xc4,
	0x57, 0x08, 0x59, 0xff, 0xeb, 0xa6, 0xce, 0x14, 0xe9, 0x1d, 0x67, 0x73, 0x20, 0xc1, 0x7f, 0x51,
	0x57, 0x69, 0xae, 0x1b, 0x45, 0xfa, 0xf6, 0x97, 0x5b, 0x64, 0x62, 0xd2, 0x45, 0x25, 0xa0, 0xd1,
	0x64, 0x30, 0x0e, 0x4c, 0x4c, 0x2d, 0x34, 0xc1, 0x67, 0x85, 0x5a, 0x34, 0x5a, 0xc4, 0x19, 0x41,
	0x2e, 0xf8, 0xfd, 0xc0, 0xe8, 0x52, 0x29, 0xb8, 0x06, 0x49, 0x86, 0x2e, 0xde, 0x16, 0xce, 0xa2,
	0xf5, 0x36, 0xf4, 0x37, 0xdb, 0xd0, 0x7f, 0xdd, 0x86, 0xfe, 0xe3, 0x2e, 0xf4, 0x36, 0xbb, 0xd0,
	0x7b, 0xde, 0x85, 0xde, 0xed, 0x59, 0x5e, 0xe8, 0xbb, 0x26, 0xa1, 0x29, 0x54, 0xb6, 0x37, 0xe7,
	0xa6, 0x2c, 0xcc, 0x96, 0x85, 0x3d, 0xb0, 0xb6, 0x50, 0x7a, 0xb5, 0x10, 0x2a, 0xe9, 0xda, 0x16,
	0x5c, 0xbe, 0x05, 0x00, 0x00, 0xff, 0xff, 0xd5, 0x38, 0x6d, 0x51, 0x67, 0x02, 0x00, 0x00,
}

func (m *Crow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Crow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Crow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintCrow(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.DisputeId) > 0 {
		i -= len(m.DisputeId)
		copy(dAtA[i:], m.DisputeId)
		i = encodeVarintCrow(dAtA, i, uint64(len(m.DisputeId)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Timeout) > 0 {
		for iNdEx := len(m.Timeout) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Timeout[iNdEx])
			copy(dAtA[i:], m.Timeout[iNdEx])
			i = encodeVarintCrow(dAtA, i, uint64(len(m.Timeout[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintCrow(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.BuyerFunds) > 0 {
		for iNdEx := len(m.BuyerFunds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BuyerFunds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCrow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.SellerCollateral) > 0 {
		for iNdEx := len(m.SellerCollateral) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SellerCollateral[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCrow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.BuyerCollateral) > 0 {
		for iNdEx := len(m.BuyerCollateral) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BuyerCollateral[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCrow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.SellerId) > 0 {
		i -= len(m.SellerId)
		copy(dAtA[i:], m.SellerId)
		i = encodeVarintCrow(dAtA, i, uint64(len(m.SellerId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BuyerId) > 0 {
		i -= len(m.BuyerId)
		copy(dAtA[i:], m.BuyerId)
		i = encodeVarintCrow(dAtA, i, uint64(len(m.BuyerId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintCrow(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ListingId) > 0 {
		i -= len(m.ListingId)
		copy(dAtA[i:], m.ListingId)
		i = encodeVarintCrow(dAtA, i, uint64(len(m.ListingId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCrow(dAtA []byte, offset int, v uint64) int {
	offset -= sovCrow(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Crow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ListingId)
	if l > 0 {
		n += 1 + l + sovCrow(uint64(l))
	}
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovCrow(uint64(l))
	}
	l = len(m.BuyerId)
	if l > 0 {
		n += 1 + l + sovCrow(uint64(l))
	}
	l = len(m.SellerId)
	if l > 0 {
		n += 1 + l + sovCrow(uint64(l))
	}
	if len(m.BuyerCollateral) > 0 {
		for _, e := range m.BuyerCollateral {
			l = e.Size()
			n += 1 + l + sovCrow(uint64(l))
		}
	}
	if len(m.SellerCollateral) > 0 {
		for _, e := range m.SellerCollateral {
			l = e.Size()
			n += 1 + l + sovCrow(uint64(l))
		}
	}
	if len(m.BuyerFunds) > 0 {
		for _, e := range m.BuyerFunds {
			l = e.Size()
			n += 1 + l + sovCrow(uint64(l))
		}
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovCrow(uint64(l))
	}
	if len(m.Timeout) > 0 {
		for _, s := range m.Timeout {
			l = len(s)
			n += 1 + l + sovCrow(uint64(l))
		}
	}
	l = len(m.DisputeId)
	if l > 0 {
		n += 1 + l + sovCrow(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovCrow(uint64(l))
	}
	return n
}

func sovCrow(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCrow(x uint64) (n int) {
	return sovCrow(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Crow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Crow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Crow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerCollateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerCollateral = append(m.BuyerCollateral, types.Coin{})
			if err := m.BuyerCollateral[len(m.BuyerCollateral)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerCollateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerCollateral = append(m.SellerCollateral, types.Coin{})
			if err := m.SellerCollateral[len(m.SellerCollateral)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerFunds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerFunds = append(m.BuyerFunds, types.Coin{})
			if err := m.BuyerFunds[len(m.BuyerFunds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timeout = append(m.Timeout, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisputeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCrow(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCrow
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCrow
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCrow
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCrow
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCrow        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCrow          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCrow = fmt.Errorf("proto: unexpected end of group")
)
