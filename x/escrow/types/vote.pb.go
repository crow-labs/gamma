// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: escrow/vote.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Vote struct {
	VoterId          string       `protobuf:"bytes,1,opt,name=voterId,proto3" json:"voterId,omitempty"`
	DisputeId        string       `protobuf:"bytes,2,opt,name=disputeId,proto3" json:"disputeId,omitempty"`
	VoteId           string       `protobuf:"bytes,3,opt,name=voteId,proto3" json:"voteId,omitempty"`
	BuyerGuilty      bool         `protobuf:"varint,4,opt,name=buyerGuilty,proto3" json:"buyerGuilty,omitempty"`
	SellerGuilty     bool         `protobuf:"varint,5,opt,name=sellerGuilty,proto3" json:"sellerGuilty,omitempty"`
	RefundToBuyer    []types.Coin `protobuf:"bytes,6,rep,name=refundToBuyer,proto3" json:"refundToBuyer"`
	SendToSeller     []types.Coin `protobuf:"bytes,7,rep,name=sendToSeller,proto3" json:"sendToSeller"`
	BuyerPunishment  string       `protobuf:"bytes,8,opt,name=buyerPunishment,proto3" json:"buyerPunishment,omitempty"`
	SellerPunishment string       `protobuf:"bytes,9,opt,name=sellerPunishment,proto3" json:"sellerPunishment,omitempty"`
	Creator          string       `protobuf:"bytes,10,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Vote) Reset()         { *m = Vote{} }
func (m *Vote) String() string { return proto.CompactTextString(m) }
func (*Vote) ProtoMessage()    {}
func (*Vote) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa4b5642e19b921b, []int{0}
}
func (m *Vote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vote.Merge(m, src)
}
func (m *Vote) XXX_Size() int {
	return m.Size()
}
func (m *Vote) XXX_DiscardUnknown() {
	xxx_messageInfo_Vote.DiscardUnknown(m)
}

var xxx_messageInfo_Vote proto.InternalMessageInfo

func (m *Vote) GetVoterId() string {
	if m != nil {
		return m.VoterId
	}
	return ""
}

func (m *Vote) GetDisputeId() string {
	if m != nil {
		return m.DisputeId
	}
	return ""
}

func (m *Vote) GetVoteId() string {
	if m != nil {
		return m.VoteId
	}
	return ""
}

func (m *Vote) GetBuyerGuilty() bool {
	if m != nil {
		return m.BuyerGuilty
	}
	return false
}

func (m *Vote) GetSellerGuilty() bool {
	if m != nil {
		return m.SellerGuilty
	}
	return false
}

func (m *Vote) GetRefundToBuyer() []types.Coin {
	if m != nil {
		return m.RefundToBuyer
	}
	return nil
}

func (m *Vote) GetSendToSeller() []types.Coin {
	if m != nil {
		return m.SendToSeller
	}
	return nil
}

func (m *Vote) GetBuyerPunishment() string {
	if m != nil {
		return m.BuyerPunishment
	}
	return ""
}

func (m *Vote) GetSellerPunishment() string {
	if m != nil {
		return m.SellerPunishment
	}
	return ""
}

func (m *Vote) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*Vote)(nil), "crowlabs.gamma.escrow.Vote")
}

func init() { proto.RegisterFile("escrow/vote.proto", fileDescriptor_fa4b5642e19b921b) }

var fileDescriptor_fa4b5642e19b921b = []byte{
	// 365 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0x13, 0x5a, 0xfa, 0xe3, 0x82, 0x00, 0x0b, 0x90, 0xa9, 0x50, 0x88, 0x3a, 0x05, 0x24,
	0x6c, 0x15, 0xde, 0xa0, 0x15, 0x42, 0xdd, 0x50, 0x41, 0x0c, 0x6c, 0xf9, 0x31, 0x69, 0xa4, 0x24,
	0xb7, 0x8a, 0x9d, 0x42, 0xdf, 0x82, 0x91, 0x47, 0xea, 0xd8, 0x91, 0x09, 0xa1, 0xf6, 0x45, 0x90,
	0x9d, 0x00, 0x2d, 0x2c, 0x6c, 0x39, 0xe7, 0x7e, 0xd7, 0xce, 0xf1, 0xbd, 0x68, 0x8f, 0x0b, 0x3f,
	0x83, 0x27, 0x36, 0x01, 0xc9, 0xe9, 0x38, 0x03, 0x09, 0xf8, 0x40, 0x19, 0xb1, 0xeb, 0x09, 0x1a,
	0xba, 0x49, 0xe2, 0xd2, 0x82, 0x68, 0xef, 0x87, 0x10, 0x82, 0x26, 0x98, 0xfa, 0x2a, 0xe0, 0xb6,
	0xe5, 0x83, 0x48, 0x40, 0x30, 0xcf, 0x15, 0x9c, 0x4d, 0xba, 0x1e, 0x97, 0x6e, 0x97, 0xf9, 0x10,
	0xa5, 0x45, 0xbd, 0xf3, 0x5a, 0x41, 0xd5, 0x7b, 0x90, 0x1c, 0x13, 0x54, 0x57, 0x77, 0x64, 0x83,
	0x80, 0x98, 0xb6, 0xe9, 0x34, 0x87, 0x5f, 0x12, 0x1f, 0xa3, 0x66, 0x10, 0x89, 0x71, 0x2e, 0xf9,
	0x20, 0x20, 0x1b, 0xba, 0xf6, 0x63, 0xe0, 0x43, 0x54, 0x53, 0xe0, 0x20, 0x20, 0x15, 0x5d, 0x2a,
	0x15, 0xb6, 0x51, 0xcb, 0xcb, 0xa7, 0x3c, 0xbb, 0xce, 0xa3, 0x58, 0x4e, 0x49, 0xd5, 0x36, 0x9d,
	0xc6, 0x70, 0xd5, 0xc2, 0x1d, 0xb4, 0x25, 0x78, 0x1c, 0x7f, 0x23, 0x9b, 0x1a, 0x59, 0xf3, 0xf0,
	0x15, 0xda, 0xce, 0xf8, 0x63, 0x9e, 0x06, 0x77, 0xd0, 0x53, 0xad, 0xa4, 0x66, 0x57, 0x9c, 0xd6,
	0xc5, 0x11, 0x2d, 0x62, 0x51, 0x15, 0x8b, 0x96, 0xb1, 0x68, 0x1f, 0xa2, 0xb4, 0x57, 0x9d, 0xbd,
	0x9f, 0x18, 0xc3, 0xf5, 0x2e, 0xdc, 0x57, 0x57, 0x29, 0x79, 0xab, 0x0f, 0x27, 0xf5, 0xff, 0x9d,
	0xb2, 0xd6, 0x84, 0x1d, 0xb4, 0xa3, 0x7f, 0xff, 0x26, 0x4f, 0x23, 0x31, 0x4a, 0x78, 0x2a, 0x49,
	0x43, 0x47, 0xfe, 0x6d, 0xe3, 0x33, 0xb4, 0x5b, 0xa4, 0x58, 0x41, 0x9b, 0x1a, 0xfd, 0xe3, 0xab,
	0x77, 0xf7, 0x33, 0xee, 0x4a, 0xc8, 0x08, 0x2a, 0xde, 0xbd, 0x94, 0xbd, 0xfe, 0x6c, 0x61, 0x99,
	0xf3, 0x85, 0x65, 0x7e, 0x2c, 0x2c, 0xf3, 0x65, 0x69, 0x19, 0xf3, 0xa5, 0x65, 0xbc, 0x2d, 0x2d,
	0xe3, 0xe1, 0x34, 0x8c, 0xe4, 0x28, 0xf7, 0xa8, 0x0f, 0x09, 0x53, 0xb3, 0x3f, 0x57, 0xdb, 0xc0,
	0xf4, 0x36, 0xb0, 0x67, 0x56, 0x6e, 0x8c, 0x9c, 0x8e, 0xb9, 0xf0, 0x6a, 0x7a, 0xcc, 0x97, 0x9f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x2e, 0xed, 0x0f, 0xcb, 0x48, 0x02, 0x00, 0x00,
}

func (m *Vote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintVote(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.SellerPunishment) > 0 {
		i -= len(m.SellerPunishment)
		copy(dAtA[i:], m.SellerPunishment)
		i = encodeVarintVote(dAtA, i, uint64(len(m.SellerPunishment)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.BuyerPunishment) > 0 {
		i -= len(m.BuyerPunishment)
		copy(dAtA[i:], m.BuyerPunishment)
		i = encodeVarintVote(dAtA, i, uint64(len(m.BuyerPunishment)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SendToSeller) > 0 {
		for iNdEx := len(m.SendToSeller) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SendToSeller[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVote(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.RefundToBuyer) > 0 {
		for iNdEx := len(m.RefundToBuyer) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RefundToBuyer[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVote(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.SellerGuilty {
		i--
		if m.SellerGuilty {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.BuyerGuilty {
		i--
		if m.BuyerGuilty {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.VoteId) > 0 {
		i -= len(m.VoteId)
		copy(dAtA[i:], m.VoteId)
		i = encodeVarintVote(dAtA, i, uint64(len(m.VoteId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DisputeId) > 0 {
		i -= len(m.DisputeId)
		copy(dAtA[i:], m.DisputeId)
		i = encodeVarintVote(dAtA, i, uint64(len(m.DisputeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VoterId) > 0 {
		i -= len(m.VoterId)
		copy(dAtA[i:], m.VoterId)
		i = encodeVarintVote(dAtA, i, uint64(len(m.VoterId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintVote(dAtA []byte, offset int, v uint64) int {
	offset -= sovVote(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Vote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VoterId)
	if l > 0 {
		n += 1 + l + sovVote(uint64(l))
	}
	l = len(m.DisputeId)
	if l > 0 {
		n += 1 + l + sovVote(uint64(l))
	}
	l = len(m.VoteId)
	if l > 0 {
		n += 1 + l + sovVote(uint64(l))
	}
	if m.BuyerGuilty {
		n += 2
	}
	if m.SellerGuilty {
		n += 2
	}
	if len(m.RefundToBuyer) > 0 {
		for _, e := range m.RefundToBuyer {
			l = e.Size()
			n += 1 + l + sovVote(uint64(l))
		}
	}
	if len(m.SendToSeller) > 0 {
		for _, e := range m.SendToSeller {
			l = e.Size()
			n += 1 + l + sovVote(uint64(l))
		}
	}
	l = len(m.BuyerPunishment)
	if l > 0 {
		n += 1 + l + sovVote(uint64(l))
	}
	l = len(m.SellerPunishment)
	if l > 0 {
		n += 1 + l + sovVote(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovVote(uint64(l))
	}
	return n
}

func sovVote(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVote(x uint64) (n int) {
	return sovVote(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Vote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVote
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisputeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerGuilty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BuyerGuilty = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerGuilty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SellerGuilty = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundToBuyer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVote
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefundToBuyer = append(m.RefundToBuyer, types.Coin{})
			if err := m.RefundToBuyer[len(m.RefundToBuyer)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendToSeller", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVote
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendToSeller = append(m.SendToSeller, types.Coin{})
			if err := m.SendToSeller[len(m.SendToSeller)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerPunishment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerPunishment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerPunishment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerPunishment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVote(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVote
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVote(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVote
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVote
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVote
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVote
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVote
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVote
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVote        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVote          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVote = fmt.Errorf("proto: unexpected end of group")
)
