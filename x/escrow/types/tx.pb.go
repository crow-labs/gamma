// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: escrow/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateCrow struct {
	Creator          string       `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ListingId        string       `protobuf:"bytes,2,opt,name=listingId,proto3" json:"listingId,omitempty"`
	OrderId          string       `protobuf:"bytes,3,opt,name=orderId,proto3" json:"orderId,omitempty"`
	BuyerId          string       `protobuf:"bytes,4,opt,name=buyerId,proto3" json:"buyerId,omitempty"`
	SellerId         string       `protobuf:"bytes,5,opt,name=sellerId,proto3" json:"sellerId,omitempty"`
	BuyerCollateral  []types.Coin `protobuf:"bytes,6,rep,name=buyerCollateral,proto3" json:"buyerCollateral"`
	SellerCollateral []types.Coin `protobuf:"bytes,7,rep,name=sellerCollateral,proto3" json:"sellerCollateral"`
	BuyerFunds       []types.Coin `protobuf:"bytes,8,rep,name=buyerFunds,proto3" json:"buyerFunds"`
	Status           string       `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	Timeout          []string     `protobuf:"bytes,10,rep,name=timeout,proto3" json:"timeout,omitempty"`
	DisputeId        string       `protobuf:"bytes,11,opt,name=disputeId,proto3" json:"disputeId,omitempty"`
}

func (m *MsgCreateCrow) Reset()         { *m = MsgCreateCrow{} }
func (m *MsgCreateCrow) String() string { return proto.CompactTextString(m) }
func (*MsgCreateCrow) ProtoMessage()    {}
func (*MsgCreateCrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{0}
}
func (m *MsgCreateCrow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateCrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateCrow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateCrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateCrow.Merge(m, src)
}
func (m *MsgCreateCrow) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateCrow) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateCrow.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateCrow proto.InternalMessageInfo

func (m *MsgCreateCrow) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateCrow) GetListingId() string {
	if m != nil {
		return m.ListingId
	}
	return ""
}

func (m *MsgCreateCrow) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *MsgCreateCrow) GetBuyerId() string {
	if m != nil {
		return m.BuyerId
	}
	return ""
}

func (m *MsgCreateCrow) GetSellerId() string {
	if m != nil {
		return m.SellerId
	}
	return ""
}

func (m *MsgCreateCrow) GetBuyerCollateral() []types.Coin {
	if m != nil {
		return m.BuyerCollateral
	}
	return nil
}

func (m *MsgCreateCrow) GetSellerCollateral() []types.Coin {
	if m != nil {
		return m.SellerCollateral
	}
	return nil
}

func (m *MsgCreateCrow) GetBuyerFunds() []types.Coin {
	if m != nil {
		return m.BuyerFunds
	}
	return nil
}

func (m *MsgCreateCrow) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *MsgCreateCrow) GetTimeout() []string {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *MsgCreateCrow) GetDisputeId() string {
	if m != nil {
		return m.DisputeId
	}
	return ""
}

type MsgCreateCrowResponse struct {
}

func (m *MsgCreateCrowResponse) Reset()         { *m = MsgCreateCrowResponse{} }
func (m *MsgCreateCrowResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateCrowResponse) ProtoMessage()    {}
func (*MsgCreateCrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{1}
}
func (m *MsgCreateCrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateCrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateCrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateCrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateCrowResponse.Merge(m, src)
}
func (m *MsgCreateCrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateCrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateCrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateCrowResponse proto.InternalMessageInfo

type MsgUpdateCrow struct {
	Creator          string       `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ListingId        string       `protobuf:"bytes,2,opt,name=listingId,proto3" json:"listingId,omitempty"`
	OrderId          string       `protobuf:"bytes,3,opt,name=orderId,proto3" json:"orderId,omitempty"`
	BuyerId          string       `protobuf:"bytes,4,opt,name=buyerId,proto3" json:"buyerId,omitempty"`
	SellerId         string       `protobuf:"bytes,5,opt,name=sellerId,proto3" json:"sellerId,omitempty"`
	BuyerCollateral  []types.Coin `protobuf:"bytes,6,rep,name=buyerCollateral,proto3" json:"buyerCollateral"`
	SellerCollateral []types.Coin `protobuf:"bytes,7,rep,name=sellerCollateral,proto3" json:"sellerCollateral"`
	BuyerFunds       []types.Coin `protobuf:"bytes,8,rep,name=buyerFunds,proto3" json:"buyerFunds"`
	Status           string       `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	Timeout          []string     `protobuf:"bytes,10,rep,name=timeout,proto3" json:"timeout,omitempty"`
	DisputeId        string       `protobuf:"bytes,11,opt,name=disputeId,proto3" json:"disputeId,omitempty"`
}

func (m *MsgUpdateCrow) Reset()         { *m = MsgUpdateCrow{} }
func (m *MsgUpdateCrow) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateCrow) ProtoMessage()    {}
func (*MsgUpdateCrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{2}
}
func (m *MsgUpdateCrow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateCrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateCrow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateCrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateCrow.Merge(m, src)
}
func (m *MsgUpdateCrow) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateCrow) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateCrow.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateCrow proto.InternalMessageInfo

func (m *MsgUpdateCrow) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateCrow) GetListingId() string {
	if m != nil {
		return m.ListingId
	}
	return ""
}

func (m *MsgUpdateCrow) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *MsgUpdateCrow) GetBuyerId() string {
	if m != nil {
		return m.BuyerId
	}
	return ""
}

func (m *MsgUpdateCrow) GetSellerId() string {
	if m != nil {
		return m.SellerId
	}
	return ""
}

func (m *MsgUpdateCrow) GetBuyerCollateral() []types.Coin {
	if m != nil {
		return m.BuyerCollateral
	}
	return nil
}

func (m *MsgUpdateCrow) GetSellerCollateral() []types.Coin {
	if m != nil {
		return m.SellerCollateral
	}
	return nil
}

func (m *MsgUpdateCrow) GetBuyerFunds() []types.Coin {
	if m != nil {
		return m.BuyerFunds
	}
	return nil
}

func (m *MsgUpdateCrow) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *MsgUpdateCrow) GetTimeout() []string {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *MsgUpdateCrow) GetDisputeId() string {
	if m != nil {
		return m.DisputeId
	}
	return ""
}

type MsgUpdateCrowResponse struct {
}

func (m *MsgUpdateCrowResponse) Reset()         { *m = MsgUpdateCrowResponse{} }
func (m *MsgUpdateCrowResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateCrowResponse) ProtoMessage()    {}
func (*MsgUpdateCrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{3}
}
func (m *MsgUpdateCrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateCrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateCrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateCrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateCrowResponse.Merge(m, src)
}
func (m *MsgUpdateCrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateCrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateCrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateCrowResponse proto.InternalMessageInfo

type MsgDeleteCrow struct {
	Creator   string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ListingId string `protobuf:"bytes,2,opt,name=listingId,proto3" json:"listingId,omitempty"`
	OrderId   string `protobuf:"bytes,3,opt,name=orderId,proto3" json:"orderId,omitempty"`
}

func (m *MsgDeleteCrow) Reset()         { *m = MsgDeleteCrow{} }
func (m *MsgDeleteCrow) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteCrow) ProtoMessage()    {}
func (*MsgDeleteCrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{4}
}
func (m *MsgDeleteCrow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteCrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteCrow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteCrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteCrow.Merge(m, src)
}
func (m *MsgDeleteCrow) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteCrow) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteCrow.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteCrow proto.InternalMessageInfo

func (m *MsgDeleteCrow) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDeleteCrow) GetListingId() string {
	if m != nil {
		return m.ListingId
	}
	return ""
}

func (m *MsgDeleteCrow) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

type MsgDeleteCrowResponse struct {
}

func (m *MsgDeleteCrowResponse) Reset()         { *m = MsgDeleteCrowResponse{} }
func (m *MsgDeleteCrowResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteCrowResponse) ProtoMessage()    {}
func (*MsgDeleteCrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{5}
}
func (m *MsgDeleteCrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteCrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteCrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteCrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteCrowResponse.Merge(m, src)
}
func (m *MsgDeleteCrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteCrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteCrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteCrowResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateCrow)(nil), "crowlabs.gamma.escrow.MsgCreateCrow")
	proto.RegisterType((*MsgCreateCrowResponse)(nil), "crowlabs.gamma.escrow.MsgCreateCrowResponse")
	proto.RegisterType((*MsgUpdateCrow)(nil), "crowlabs.gamma.escrow.MsgUpdateCrow")
	proto.RegisterType((*MsgUpdateCrowResponse)(nil), "crowlabs.gamma.escrow.MsgUpdateCrowResponse")
	proto.RegisterType((*MsgDeleteCrow)(nil), "crowlabs.gamma.escrow.MsgDeleteCrow")
	proto.RegisterType((*MsgDeleteCrowResponse)(nil), "crowlabs.gamma.escrow.MsgDeleteCrowResponse")
}

func init() { proto.RegisterFile("escrow/tx.proto", fileDescriptor_8e01f3e45c7c056c) }

var fileDescriptor_8e01f3e45c7c056c = []byte{
	// 482 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x55, 0x41, 0x6b, 0xd4, 0x40,
	0x14, 0xde, 0x34, 0x75, 0xdb, 0x9d, 0x22, 0xd5, 0xc1, 0xea, 0xb8, 0x48, 0x5c, 0x8a, 0x87, 0x0a,
	0x3a, 0xa1, 0xf5, 0x07, 0x08, 0x8d, 0x08, 0x8b, 0xf4, 0xb2, 0xe0, 0xc5, 0x93, 0x93, 0x64, 0x88,
	0x81, 0x24, 0x2f, 0xe4, 0x4d, 0x6c, 0xfb, 0x2f, 0xfc, 0x1f, 0xfe, 0x09, 0x8f, 0x3d, 0xf6, 0xe8,
	0x49, 0x64, 0xf7, 0x8f, 0xc8, 0x4c, 0x26, 0x9b, 0xac, 0x2b, 0xcb, 0x5e, 0x3c, 0x08, 0x5e, 0xc2,
	0x7c, 0xf3, 0xbd, 0xf7, 0x3e, 0xde, 0xfb, 0x86, 0x17, 0x72, 0x28, 0x31, 0xaa, 0xe0, 0xd2, 0x57,
	0x57, 0xbc, 0xac, 0x40, 0x01, 0x3d, 0xd2, 0x30, 0x13, 0x21, 0xf2, 0x44, 0xe4, 0xb9, 0xe0, 0x0d,
	0x3f, 0xbe, 0x6f, 0xe3, 0xf4, 0xa7, 0x89, 0x1c, 0x7b, 0x11, 0x60, 0x0e, 0xe8, 0x87, 0x02, 0xa5,
	0xff, 0xf9, 0x34, 0x94, 0x4a, 0x9c, 0xfa, 0x11, 0xa4, 0x85, 0xe5, 0x1f, 0x24, 0x90, 0x80, 0x39,
	0xfa, 0xfa, 0xd4, 0xdc, 0x1e, 0x7f, 0x73, 0xc9, 0xdd, 0x0b, 0x4c, 0x82, 0x4a, 0x0a, 0x25, 0x83,
	0x0a, 0x2e, 0x29, 0x23, 0x7b, 0x91, 0x46, 0x50, 0x31, 0x67, 0xe2, 0x9c, 0x8c, 0x66, 0x2d, 0xa4,
	0x4f, 0xc8, 0x28, 0x4b, 0x51, 0xa5, 0x45, 0x32, 0x8d, 0xd9, 0x8e, 0xe1, 0xba, 0x0b, 0x9d, 0x07,
	0x55, 0x2c, 0xab, 0x69, 0xcc, 0xdc, 0x26, 0xcf, 0x42, 0xcd, 0x84, 0xf5, 0xb5, 0x61, 0x76, 0x1b,
	0xc6, 0x42, 0x3a, 0x26, 0xfb, 0x28, 0xb3, 0xcc, 0x50, 0x77, 0x0c, 0xb5, 0xc4, 0x74, 0x4a, 0x0e,
	0x4d, 0x58, 0x00, 0x59, 0x26, 0x94, 0xac, 0x44, 0xc6, 0x86, 0x13, 0xf7, 0xe4, 0xe0, 0xec, 0x31,
	0x6f, 0x3a, 0xe5, 0xba, 0x53, 0x6e, 0x3b, 0xe5, 0x01, 0xa4, 0xc5, 0xf9, 0xee, 0xcd, 0x8f, 0xa7,
	0x83, 0xd9, 0xef, 0x79, 0xf4, 0x1d, 0xb9, 0xd7, 0x94, 0xed, 0xd5, 0xda, 0xdb, 0xae, 0xd6, 0x5a,
	0x22, 0x7d, 0x4d, 0x88, 0xa9, 0xff, 0xb6, 0x2e, 0x62, 0x64, 0xfb, 0xdb, 0x95, 0xe9, 0xa5, 0xd0,
	0x87, 0x64, 0x88, 0x4a, 0xa8, 0x1a, 0xd9, 0xc8, 0xb4, 0x6c, 0x91, 0x1e, 0x93, 0x4a, 0x73, 0x09,
	0xb5, 0x62, 0x64, 0xe2, 0xea, 0x31, 0x59, 0xa8, 0x07, 0x1f, 0xa7, 0x58, 0xd6, 0x4a, 0x4e, 0x63,
	0x76, 0xd0, 0x0c, 0x7e, 0x79, 0x71, 0xfc, 0x88, 0x1c, 0xad, 0x38, 0x38, 0x93, 0x58, 0x42, 0x81,
	0xb2, 0xf5, 0xf6, 0x7d, 0x19, 0xff, 0xf7, 0xf6, 0x9f, 0xf6, 0xb6, 0x73, 0x70, 0xe9, 0xad, 0x30,
	0xd6, 0xbe, 0x91, 0x99, 0xfc, 0x5b, 0xd6, 0x5a, 0xed, 0x4e, 0xa2, 0xd5, 0x3e, 0xfb, 0xba, 0x43,
	0xdc, 0x0b, 0x4c, 0xe8, 0x47, 0x42, 0x7a, 0x7b, 0xe3, 0x19, 0xff, 0xe3, 0xaa, 0xe2, 0x2b, 0x6f,
	0x73, 0xfc, 0x62, 0x9b, 0xa8, 0x56, 0x49, 0x2b, 0xf4, 0x5e, 0xef, 0x06, 0x85, 0x2e, 0x6a, 0x93,
	0xc2, 0xfa, 0x1c, 0xb5, 0x42, 0x6f, 0x88, 0x1b, 0x14, 0xba, 0xa8, 0x4d, 0x0a, 0xeb, 0xd3, 0x3a,
	0x0f, 0x6e, 0xe6, 0x9e, 0x73, 0x3b, 0xf7, 0x9c, 0x9f, 0x73, 0xcf, 0xf9, 0xb2, 0xf0, 0x06, 0xb7,
	0x0b, 0x6f, 0xf0, 0x7d, 0xe1, 0x0d, 0x3e, 0x3c, 0x4f, 0x52, 0xf5, 0xa9, 0x0e, 0x79, 0x04, 0xb9,
	0x59, 0xe4, 0x2f, 0x75, 0x49, 0xdf, 0x94, 0xf4, 0xaf, 0xfc, 0xf6, 0x4f, 0x70, 0x5d, 0x4a, 0x0c,
	0x87, 0x66, 0x5b, 0xbf, 0xfa, 0x15, 0x00, 0x00, 0xff, 0xff, 0xbd, 0x1f, 0x5d, 0x21, 0x20, 0x06,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CreateCrow(ctx context.Context, in *MsgCreateCrow, opts ...grpc.CallOption) (*MsgCreateCrowResponse, error)
	UpdateCrow(ctx context.Context, in *MsgUpdateCrow, opts ...grpc.CallOption) (*MsgUpdateCrowResponse, error)
	DeleteCrow(ctx context.Context, in *MsgDeleteCrow, opts ...grpc.CallOption) (*MsgDeleteCrowResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateCrow(ctx context.Context, in *MsgCreateCrow, opts ...grpc.CallOption) (*MsgCreateCrowResponse, error) {
	out := new(MsgCreateCrowResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.gamma.escrow.Msg/CreateCrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateCrow(ctx context.Context, in *MsgUpdateCrow, opts ...grpc.CallOption) (*MsgUpdateCrowResponse, error) {
	out := new(MsgUpdateCrowResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.gamma.escrow.Msg/UpdateCrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteCrow(ctx context.Context, in *MsgDeleteCrow, opts ...grpc.CallOption) (*MsgDeleteCrowResponse, error) {
	out := new(MsgDeleteCrowResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.gamma.escrow.Msg/DeleteCrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CreateCrow(context.Context, *MsgCreateCrow) (*MsgCreateCrowResponse, error)
	UpdateCrow(context.Context, *MsgUpdateCrow) (*MsgUpdateCrowResponse, error)
	DeleteCrow(context.Context, *MsgDeleteCrow) (*MsgDeleteCrowResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateCrow(ctx context.Context, req *MsgCreateCrow) (*MsgCreateCrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCrow not implemented")
}
func (*UnimplementedMsgServer) UpdateCrow(ctx context.Context, req *MsgUpdateCrow) (*MsgUpdateCrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCrow not implemented")
}
func (*UnimplementedMsgServer) DeleteCrow(ctx context.Context, req *MsgDeleteCrow) (*MsgDeleteCrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCrow not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateCrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateCrow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateCrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.gamma.escrow.Msg/CreateCrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateCrow(ctx, req.(*MsgCreateCrow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateCrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateCrow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateCrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.gamma.escrow.Msg/UpdateCrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateCrow(ctx, req.(*MsgUpdateCrow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteCrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteCrow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteCrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.gamma.escrow.Msg/DeleteCrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteCrow(ctx, req.(*MsgDeleteCrow))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "crowlabs.gamma.escrow.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCrow",
			Handler:    _Msg_CreateCrow_Handler,
		},
		{
			MethodName: "UpdateCrow",
			Handler:    _Msg_UpdateCrow_Handler,
		},
		{
			MethodName: "DeleteCrow",
			Handler:    _Msg_DeleteCrow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "escrow/tx.proto",
}

func (m *MsgCreateCrow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateCrow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateCrow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DisputeId) > 0 {
		i -= len(m.DisputeId)
		copy(dAtA[i:], m.DisputeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DisputeId)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Timeout) > 0 {
		for iNdEx := len(m.Timeout) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Timeout[iNdEx])
			copy(dAtA[i:], m.Timeout[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Timeout[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.BuyerFunds) > 0 {
		for iNdEx := len(m.BuyerFunds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BuyerFunds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.SellerCollateral) > 0 {
		for iNdEx := len(m.SellerCollateral) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SellerCollateral[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.BuyerCollateral) > 0 {
		for iNdEx := len(m.BuyerCollateral) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BuyerCollateral[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.SellerId) > 0 {
		i -= len(m.SellerId)
		copy(dAtA[i:], m.SellerId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SellerId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BuyerId) > 0 {
		i -= len(m.BuyerId)
		copy(dAtA[i:], m.BuyerId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BuyerId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ListingId) > 0 {
		i -= len(m.ListingId)
		copy(dAtA[i:], m.ListingId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ListingId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateCrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateCrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateCrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateCrow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateCrow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateCrow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DisputeId) > 0 {
		i -= len(m.DisputeId)
		copy(dAtA[i:], m.DisputeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DisputeId)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Timeout) > 0 {
		for iNdEx := len(m.Timeout) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Timeout[iNdEx])
			copy(dAtA[i:], m.Timeout[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Timeout[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.BuyerFunds) > 0 {
		for iNdEx := len(m.BuyerFunds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BuyerFunds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.SellerCollateral) > 0 {
		for iNdEx := len(m.SellerCollateral) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SellerCollateral[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.BuyerCollateral) > 0 {
		for iNdEx := len(m.BuyerCollateral) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BuyerCollateral[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.SellerId) > 0 {
		i -= len(m.SellerId)
		copy(dAtA[i:], m.SellerId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SellerId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BuyerId) > 0 {
		i -= len(m.BuyerId)
		copy(dAtA[i:], m.BuyerId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BuyerId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ListingId) > 0 {
		i -= len(m.ListingId)
		copy(dAtA[i:], m.ListingId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ListingId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateCrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateCrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateCrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteCrow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteCrow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteCrow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ListingId) > 0 {
		i -= len(m.ListingId)
		copy(dAtA[i:], m.ListingId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ListingId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteCrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteCrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteCrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateCrow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ListingId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BuyerId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SellerId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.BuyerCollateral) > 0 {
		for _, e := range m.BuyerCollateral {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.SellerCollateral) > 0 {
		for _, e := range m.SellerCollateral {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.BuyerFunds) > 0 {
		for _, e := range m.BuyerFunds {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Timeout) > 0 {
		for _, s := range m.Timeout {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.DisputeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateCrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateCrow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ListingId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BuyerId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SellerId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.BuyerCollateral) > 0 {
		for _, e := range m.BuyerCollateral {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.SellerCollateral) > 0 {
		for _, e := range m.SellerCollateral {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.BuyerFunds) > 0 {
		for _, e := range m.BuyerFunds {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Timeout) > 0 {
		for _, s := range m.Timeout {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.DisputeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateCrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteCrow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ListingId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteCrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateCrow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateCrow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateCrow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerCollateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerCollateral = append(m.BuyerCollateral, types.Coin{})
			if err := m.BuyerCollateral[len(m.BuyerCollateral)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerCollateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerCollateral = append(m.SellerCollateral, types.Coin{})
			if err := m.SellerCollateral[len(m.SellerCollateral)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerFunds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerFunds = append(m.BuyerFunds, types.Coin{})
			if err := m.BuyerFunds[len(m.BuyerFunds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timeout = append(m.Timeout, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisputeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateCrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateCrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateCrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateCrow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateCrow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateCrow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerCollateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerCollateral = append(m.BuyerCollateral, types.Coin{})
			if err := m.BuyerCollateral[len(m.BuyerCollateral)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerCollateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerCollateral = append(m.SellerCollateral, types.Coin{})
			if err := m.SellerCollateral[len(m.SellerCollateral)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerFunds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerFunds = append(m.BuyerFunds, types.Coin{})
			if err := m.BuyerFunds[len(m.BuyerFunds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timeout = append(m.Timeout, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisputeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateCrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateCrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateCrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteCrow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteCrow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteCrow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteCrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteCrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteCrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
