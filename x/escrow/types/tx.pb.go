// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: escrow/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateCrow struct {
	Creator          string       `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ListingId        string       `protobuf:"bytes,2,opt,name=listingId,proto3" json:"listingId,omitempty"`
	OrderId          string       `protobuf:"bytes,3,opt,name=orderId,proto3" json:"orderId,omitempty"`
	BuyerId          string       `protobuf:"bytes,4,opt,name=buyerId,proto3" json:"buyerId,omitempty"`
	SellerId         string       `protobuf:"bytes,5,opt,name=sellerId,proto3" json:"sellerId,omitempty"`
	BuyerCollateral  []types.Coin `protobuf:"bytes,6,rep,name=buyerCollateral,proto3" json:"buyerCollateral"`
	SellerCollateral []types.Coin `protobuf:"bytes,7,rep,name=sellerCollateral,proto3" json:"sellerCollateral"`
	BuyerFunds       []types.Coin `protobuf:"bytes,8,rep,name=buyerFunds,proto3" json:"buyerFunds"`
	Status           string       `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	Timeout          []string     `protobuf:"bytes,10,rep,name=timeout,proto3" json:"timeout,omitempty"`
	DisputeId        string       `protobuf:"bytes,11,opt,name=disputeId,proto3" json:"disputeId,omitempty"`
}

func (m *MsgCreateCrow) Reset()         { *m = MsgCreateCrow{} }
func (m *MsgCreateCrow) String() string { return proto.CompactTextString(m) }
func (*MsgCreateCrow) ProtoMessage()    {}
func (*MsgCreateCrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{0}
}
func (m *MsgCreateCrow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateCrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateCrow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateCrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateCrow.Merge(m, src)
}
func (m *MsgCreateCrow) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateCrow) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateCrow.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateCrow proto.InternalMessageInfo

func (m *MsgCreateCrow) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateCrow) GetListingId() string {
	if m != nil {
		return m.ListingId
	}
	return ""
}

func (m *MsgCreateCrow) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *MsgCreateCrow) GetBuyerId() string {
	if m != nil {
		return m.BuyerId
	}
	return ""
}

func (m *MsgCreateCrow) GetSellerId() string {
	if m != nil {
		return m.SellerId
	}
	return ""
}

func (m *MsgCreateCrow) GetBuyerCollateral() []types.Coin {
	if m != nil {
		return m.BuyerCollateral
	}
	return nil
}

func (m *MsgCreateCrow) GetSellerCollateral() []types.Coin {
	if m != nil {
		return m.SellerCollateral
	}
	return nil
}

func (m *MsgCreateCrow) GetBuyerFunds() []types.Coin {
	if m != nil {
		return m.BuyerFunds
	}
	return nil
}

func (m *MsgCreateCrow) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *MsgCreateCrow) GetTimeout() []string {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *MsgCreateCrow) GetDisputeId() string {
	if m != nil {
		return m.DisputeId
	}
	return ""
}

type MsgCreateCrowResponse struct {
}

func (m *MsgCreateCrowResponse) Reset()         { *m = MsgCreateCrowResponse{} }
func (m *MsgCreateCrowResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateCrowResponse) ProtoMessage()    {}
func (*MsgCreateCrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{1}
}
func (m *MsgCreateCrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateCrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateCrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateCrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateCrowResponse.Merge(m, src)
}
func (m *MsgCreateCrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateCrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateCrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateCrowResponse proto.InternalMessageInfo

type MsgUpdateCrow struct {
	Creator          string       `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ListingId        string       `protobuf:"bytes,2,opt,name=listingId,proto3" json:"listingId,omitempty"`
	OrderId          string       `protobuf:"bytes,3,opt,name=orderId,proto3" json:"orderId,omitempty"`
	BuyerId          string       `protobuf:"bytes,4,opt,name=buyerId,proto3" json:"buyerId,omitempty"`
	SellerId         string       `protobuf:"bytes,5,opt,name=sellerId,proto3" json:"sellerId,omitempty"`
	BuyerCollateral  []types.Coin `protobuf:"bytes,6,rep,name=buyerCollateral,proto3" json:"buyerCollateral"`
	SellerCollateral []types.Coin `protobuf:"bytes,7,rep,name=sellerCollateral,proto3" json:"sellerCollateral"`
	BuyerFunds       []types.Coin `protobuf:"bytes,8,rep,name=buyerFunds,proto3" json:"buyerFunds"`
	Status           string       `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	Timeout          []string     `protobuf:"bytes,10,rep,name=timeout,proto3" json:"timeout,omitempty"`
	DisputeId        string       `protobuf:"bytes,11,opt,name=disputeId,proto3" json:"disputeId,omitempty"`
}

func (m *MsgUpdateCrow) Reset()         { *m = MsgUpdateCrow{} }
func (m *MsgUpdateCrow) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateCrow) ProtoMessage()    {}
func (*MsgUpdateCrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{2}
}
func (m *MsgUpdateCrow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateCrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateCrow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateCrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateCrow.Merge(m, src)
}
func (m *MsgUpdateCrow) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateCrow) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateCrow.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateCrow proto.InternalMessageInfo

func (m *MsgUpdateCrow) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateCrow) GetListingId() string {
	if m != nil {
		return m.ListingId
	}
	return ""
}

func (m *MsgUpdateCrow) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *MsgUpdateCrow) GetBuyerId() string {
	if m != nil {
		return m.BuyerId
	}
	return ""
}

func (m *MsgUpdateCrow) GetSellerId() string {
	if m != nil {
		return m.SellerId
	}
	return ""
}

func (m *MsgUpdateCrow) GetBuyerCollateral() []types.Coin {
	if m != nil {
		return m.BuyerCollateral
	}
	return nil
}

func (m *MsgUpdateCrow) GetSellerCollateral() []types.Coin {
	if m != nil {
		return m.SellerCollateral
	}
	return nil
}

func (m *MsgUpdateCrow) GetBuyerFunds() []types.Coin {
	if m != nil {
		return m.BuyerFunds
	}
	return nil
}

func (m *MsgUpdateCrow) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *MsgUpdateCrow) GetTimeout() []string {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *MsgUpdateCrow) GetDisputeId() string {
	if m != nil {
		return m.DisputeId
	}
	return ""
}

type MsgUpdateCrowResponse struct {
}

func (m *MsgUpdateCrowResponse) Reset()         { *m = MsgUpdateCrowResponse{} }
func (m *MsgUpdateCrowResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateCrowResponse) ProtoMessage()    {}
func (*MsgUpdateCrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{3}
}
func (m *MsgUpdateCrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateCrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateCrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateCrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateCrowResponse.Merge(m, src)
}
func (m *MsgUpdateCrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateCrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateCrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateCrowResponse proto.InternalMessageInfo

type MsgDeleteCrow struct {
	Creator   string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ListingId string `protobuf:"bytes,2,opt,name=listingId,proto3" json:"listingId,omitempty"`
	OrderId   string `protobuf:"bytes,3,opt,name=orderId,proto3" json:"orderId,omitempty"`
}

func (m *MsgDeleteCrow) Reset()         { *m = MsgDeleteCrow{} }
func (m *MsgDeleteCrow) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteCrow) ProtoMessage()    {}
func (*MsgDeleteCrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{4}
}
func (m *MsgDeleteCrow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteCrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteCrow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteCrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteCrow.Merge(m, src)
}
func (m *MsgDeleteCrow) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteCrow) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteCrow.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteCrow proto.InternalMessageInfo

func (m *MsgDeleteCrow) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDeleteCrow) GetListingId() string {
	if m != nil {
		return m.ListingId
	}
	return ""
}

func (m *MsgDeleteCrow) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

type MsgDeleteCrowResponse struct {
}

func (m *MsgDeleteCrowResponse) Reset()         { *m = MsgDeleteCrowResponse{} }
func (m *MsgDeleteCrowResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteCrowResponse) ProtoMessage()    {}
func (*MsgDeleteCrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{5}
}
func (m *MsgDeleteCrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteCrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteCrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteCrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteCrowResponse.Merge(m, src)
}
func (m *MsgDeleteCrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteCrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteCrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteCrowResponse proto.InternalMessageInfo

type MsgCreateVote struct {
	Creator          string       `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	VoterId          string       `protobuf:"bytes,2,opt,name=voterId,proto3" json:"voterId,omitempty"`
	DisputeId        string       `protobuf:"bytes,3,opt,name=disputeId,proto3" json:"disputeId,omitempty"`
	VoteId           string       `protobuf:"bytes,4,opt,name=voteId,proto3" json:"voteId,omitempty"`
	BuyerGuilty      bool         `protobuf:"varint,5,opt,name=buyerGuilty,proto3" json:"buyerGuilty,omitempty"`
	SellerGuilty     bool         `protobuf:"varint,6,opt,name=sellerGuilty,proto3" json:"sellerGuilty,omitempty"`
	RefundToBuyer    []types.Coin `protobuf:"bytes,7,rep,name=refundToBuyer,proto3" json:"refundToBuyer"`
	SendToSeller     []types.Coin `protobuf:"bytes,8,rep,name=sendToSeller,proto3" json:"sendToSeller"`
	BuyerPunishment  string       `protobuf:"bytes,9,opt,name=buyerPunishment,proto3" json:"buyerPunishment,omitempty"`
	SellerPunishment string       `protobuf:"bytes,10,opt,name=sellerPunishment,proto3" json:"sellerPunishment,omitempty"`
}

func (m *MsgCreateVote) Reset()         { *m = MsgCreateVote{} }
func (m *MsgCreateVote) String() string { return proto.CompactTextString(m) }
func (*MsgCreateVote) ProtoMessage()    {}
func (*MsgCreateVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{6}
}
func (m *MsgCreateVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateVote.Merge(m, src)
}
func (m *MsgCreateVote) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateVote) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateVote.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateVote proto.InternalMessageInfo

func (m *MsgCreateVote) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateVote) GetVoterId() string {
	if m != nil {
		return m.VoterId
	}
	return ""
}

func (m *MsgCreateVote) GetDisputeId() string {
	if m != nil {
		return m.DisputeId
	}
	return ""
}

func (m *MsgCreateVote) GetVoteId() string {
	if m != nil {
		return m.VoteId
	}
	return ""
}

func (m *MsgCreateVote) GetBuyerGuilty() bool {
	if m != nil {
		return m.BuyerGuilty
	}
	return false
}

func (m *MsgCreateVote) GetSellerGuilty() bool {
	if m != nil {
		return m.SellerGuilty
	}
	return false
}

func (m *MsgCreateVote) GetRefundToBuyer() []types.Coin {
	if m != nil {
		return m.RefundToBuyer
	}
	return nil
}

func (m *MsgCreateVote) GetSendToSeller() []types.Coin {
	if m != nil {
		return m.SendToSeller
	}
	return nil
}

func (m *MsgCreateVote) GetBuyerPunishment() string {
	if m != nil {
		return m.BuyerPunishment
	}
	return ""
}

func (m *MsgCreateVote) GetSellerPunishment() string {
	if m != nil {
		return m.SellerPunishment
	}
	return ""
}

type MsgCreateVoteResponse struct {
}

func (m *MsgCreateVoteResponse) Reset()         { *m = MsgCreateVoteResponse{} }
func (m *MsgCreateVoteResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateVoteResponse) ProtoMessage()    {}
func (*MsgCreateVoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{7}
}
func (m *MsgCreateVoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateVoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateVoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateVoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateVoteResponse.Merge(m, src)
}
func (m *MsgCreateVoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateVoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateVoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateVoteResponse proto.InternalMessageInfo

type MsgUpdateVote struct {
	Creator          string       `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	VoterId          string       `protobuf:"bytes,2,opt,name=voterId,proto3" json:"voterId,omitempty"`
	DisputeId        string       `protobuf:"bytes,3,opt,name=disputeId,proto3" json:"disputeId,omitempty"`
	VoteId           string       `protobuf:"bytes,4,opt,name=voteId,proto3" json:"voteId,omitempty"`
	BuyerGuilty      bool         `protobuf:"varint,5,opt,name=buyerGuilty,proto3" json:"buyerGuilty,omitempty"`
	SellerGuilty     bool         `protobuf:"varint,6,opt,name=sellerGuilty,proto3" json:"sellerGuilty,omitempty"`
	RefundToBuyer    []types.Coin `protobuf:"bytes,7,rep,name=refundToBuyer,proto3" json:"refundToBuyer"`
	SendToSeller     []types.Coin `protobuf:"bytes,8,rep,name=sendToSeller,proto3" json:"sendToSeller"`
	BuyerPunishment  string       `protobuf:"bytes,9,opt,name=buyerPunishment,proto3" json:"buyerPunishment,omitempty"`
	SellerPunishment string       `protobuf:"bytes,10,opt,name=sellerPunishment,proto3" json:"sellerPunishment,omitempty"`
}

func (m *MsgUpdateVote) Reset()         { *m = MsgUpdateVote{} }
func (m *MsgUpdateVote) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateVote) ProtoMessage()    {}
func (*MsgUpdateVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{8}
}
func (m *MsgUpdateVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateVote.Merge(m, src)
}
func (m *MsgUpdateVote) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateVote) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateVote.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateVote proto.InternalMessageInfo

func (m *MsgUpdateVote) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateVote) GetVoterId() string {
	if m != nil {
		return m.VoterId
	}
	return ""
}

func (m *MsgUpdateVote) GetDisputeId() string {
	if m != nil {
		return m.DisputeId
	}
	return ""
}

func (m *MsgUpdateVote) GetVoteId() string {
	if m != nil {
		return m.VoteId
	}
	return ""
}

func (m *MsgUpdateVote) GetBuyerGuilty() bool {
	if m != nil {
		return m.BuyerGuilty
	}
	return false
}

func (m *MsgUpdateVote) GetSellerGuilty() bool {
	if m != nil {
		return m.SellerGuilty
	}
	return false
}

func (m *MsgUpdateVote) GetRefundToBuyer() []types.Coin {
	if m != nil {
		return m.RefundToBuyer
	}
	return nil
}

func (m *MsgUpdateVote) GetSendToSeller() []types.Coin {
	if m != nil {
		return m.SendToSeller
	}
	return nil
}

func (m *MsgUpdateVote) GetBuyerPunishment() string {
	if m != nil {
		return m.BuyerPunishment
	}
	return ""
}

func (m *MsgUpdateVote) GetSellerPunishment() string {
	if m != nil {
		return m.SellerPunishment
	}
	return ""
}

type MsgUpdateVoteResponse struct {
}

func (m *MsgUpdateVoteResponse) Reset()         { *m = MsgUpdateVoteResponse{} }
func (m *MsgUpdateVoteResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateVoteResponse) ProtoMessage()    {}
func (*MsgUpdateVoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{9}
}
func (m *MsgUpdateVoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateVoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateVoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateVoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateVoteResponse.Merge(m, src)
}
func (m *MsgUpdateVoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateVoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateVoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateVoteResponse proto.InternalMessageInfo

type MsgDeleteVote struct {
	Creator   string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	VoterId   string `protobuf:"bytes,2,opt,name=voterId,proto3" json:"voterId,omitempty"`
	DisputeId string `protobuf:"bytes,3,opt,name=disputeId,proto3" json:"disputeId,omitempty"`
}

func (m *MsgDeleteVote) Reset()         { *m = MsgDeleteVote{} }
func (m *MsgDeleteVote) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteVote) ProtoMessage()    {}
func (*MsgDeleteVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{10}
}
func (m *MsgDeleteVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteVote.Merge(m, src)
}
func (m *MsgDeleteVote) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteVote) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteVote.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteVote proto.InternalMessageInfo

func (m *MsgDeleteVote) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDeleteVote) GetVoterId() string {
	if m != nil {
		return m.VoterId
	}
	return ""
}

func (m *MsgDeleteVote) GetDisputeId() string {
	if m != nil {
		return m.DisputeId
	}
	return ""
}

type MsgDeleteVoteResponse struct {
}

func (m *MsgDeleteVoteResponse) Reset()         { *m = MsgDeleteVoteResponse{} }
func (m *MsgDeleteVoteResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteVoteResponse) ProtoMessage()    {}
func (*MsgDeleteVoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{11}
}
func (m *MsgDeleteVoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteVoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteVoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteVoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteVoteResponse.Merge(m, src)
}
func (m *MsgDeleteVoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteVoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteVoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteVoteResponse proto.InternalMessageInfo

type MsgCreateDispute struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CrowId      string `protobuf:"bytes,2,opt,name=crowId,proto3" json:"crowId,omitempty"`
	DisputeId   string `protobuf:"bytes,3,opt,name=disputeId,proto3" json:"disputeId,omitempty"`
	Title       string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Evidence    string `protobuf:"bytes,6,opt,name=evidence,proto3" json:"evidence,omitempty"`
}

func (m *MsgCreateDispute) Reset()         { *m = MsgCreateDispute{} }
func (m *MsgCreateDispute) String() string { return proto.CompactTextString(m) }
func (*MsgCreateDispute) ProtoMessage()    {}
func (*MsgCreateDispute) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{12}
}
func (m *MsgCreateDispute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateDispute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateDispute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateDispute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateDispute.Merge(m, src)
}
func (m *MsgCreateDispute) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateDispute) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateDispute.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateDispute proto.InternalMessageInfo

func (m *MsgCreateDispute) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateDispute) GetCrowId() string {
	if m != nil {
		return m.CrowId
	}
	return ""
}

func (m *MsgCreateDispute) GetDisputeId() string {
	if m != nil {
		return m.DisputeId
	}
	return ""
}

func (m *MsgCreateDispute) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MsgCreateDispute) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgCreateDispute) GetEvidence() string {
	if m != nil {
		return m.Evidence
	}
	return ""
}

type MsgCreateDisputeResponse struct {
}

func (m *MsgCreateDisputeResponse) Reset()         { *m = MsgCreateDisputeResponse{} }
func (m *MsgCreateDisputeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateDisputeResponse) ProtoMessage()    {}
func (*MsgCreateDisputeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{13}
}
func (m *MsgCreateDisputeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateDisputeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateDisputeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateDisputeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateDisputeResponse.Merge(m, src)
}
func (m *MsgCreateDisputeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateDisputeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateDisputeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateDisputeResponse proto.InternalMessageInfo

type MsgUpdateDispute struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CrowId      string `protobuf:"bytes,2,opt,name=crowId,proto3" json:"crowId,omitempty"`
	DisputeId   string `protobuf:"bytes,3,opt,name=disputeId,proto3" json:"disputeId,omitempty"`
	Title       string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Evidence    string `protobuf:"bytes,6,opt,name=evidence,proto3" json:"evidence,omitempty"`
}

func (m *MsgUpdateDispute) Reset()         { *m = MsgUpdateDispute{} }
func (m *MsgUpdateDispute) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateDispute) ProtoMessage()    {}
func (*MsgUpdateDispute) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{14}
}
func (m *MsgUpdateDispute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateDispute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateDispute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateDispute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateDispute.Merge(m, src)
}
func (m *MsgUpdateDispute) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateDispute) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateDispute.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateDispute proto.InternalMessageInfo

func (m *MsgUpdateDispute) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateDispute) GetCrowId() string {
	if m != nil {
		return m.CrowId
	}
	return ""
}

func (m *MsgUpdateDispute) GetDisputeId() string {
	if m != nil {
		return m.DisputeId
	}
	return ""
}

func (m *MsgUpdateDispute) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MsgUpdateDispute) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgUpdateDispute) GetEvidence() string {
	if m != nil {
		return m.Evidence
	}
	return ""
}

type MsgUpdateDisputeResponse struct {
}

func (m *MsgUpdateDisputeResponse) Reset()         { *m = MsgUpdateDisputeResponse{} }
func (m *MsgUpdateDisputeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateDisputeResponse) ProtoMessage()    {}
func (*MsgUpdateDisputeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{15}
}
func (m *MsgUpdateDisputeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateDisputeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateDisputeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateDisputeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateDisputeResponse.Merge(m, src)
}
func (m *MsgUpdateDisputeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateDisputeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateDisputeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateDisputeResponse proto.InternalMessageInfo

type MsgDeleteDispute struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CrowId  string `protobuf:"bytes,2,opt,name=crowId,proto3" json:"crowId,omitempty"`
}

func (m *MsgDeleteDispute) Reset()         { *m = MsgDeleteDispute{} }
func (m *MsgDeleteDispute) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteDispute) ProtoMessage()    {}
func (*MsgDeleteDispute) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{16}
}
func (m *MsgDeleteDispute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteDispute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteDispute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteDispute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteDispute.Merge(m, src)
}
func (m *MsgDeleteDispute) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteDispute) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteDispute.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteDispute proto.InternalMessageInfo

func (m *MsgDeleteDispute) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDeleteDispute) GetCrowId() string {
	if m != nil {
		return m.CrowId
	}
	return ""
}

type MsgDeleteDisputeResponse struct {
}

func (m *MsgDeleteDisputeResponse) Reset()         { *m = MsgDeleteDisputeResponse{} }
func (m *MsgDeleteDisputeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteDisputeResponse) ProtoMessage()    {}
func (*MsgDeleteDisputeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{17}
}
func (m *MsgDeleteDisputeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteDisputeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteDisputeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteDisputeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteDisputeResponse.Merge(m, src)
}
func (m *MsgDeleteDisputeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteDisputeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteDisputeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteDisputeResponse proto.InternalMessageInfo

type MsgCreateVerdict struct {
	Creator       string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CrowId        string   `protobuf:"bytes,2,opt,name=crowId,proto3" json:"crowId,omitempty"`
	DisputeId     string   `protobuf:"bytes,3,opt,name=disputeId,proto3" json:"disputeId,omitempty"`
	VoteIds       []string `protobuf:"bytes,4,rep,name=voteIds,proto3" json:"voteIds,omitempty"`
	ResultingVote *Vote    `protobuf:"bytes,5,opt,name=resultingVote,proto3" json:"resultingVote,omitempty"`
}

func (m *MsgCreateVerdict) Reset()         { *m = MsgCreateVerdict{} }
func (m *MsgCreateVerdict) String() string { return proto.CompactTextString(m) }
func (*MsgCreateVerdict) ProtoMessage()    {}
func (*MsgCreateVerdict) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{18}
}
func (m *MsgCreateVerdict) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateVerdict) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateVerdict.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateVerdict) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateVerdict.Merge(m, src)
}
func (m *MsgCreateVerdict) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateVerdict) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateVerdict.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateVerdict proto.InternalMessageInfo

func (m *MsgCreateVerdict) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateVerdict) GetCrowId() string {
	if m != nil {
		return m.CrowId
	}
	return ""
}

func (m *MsgCreateVerdict) GetDisputeId() string {
	if m != nil {
		return m.DisputeId
	}
	return ""
}

func (m *MsgCreateVerdict) GetVoteIds() []string {
	if m != nil {
		return m.VoteIds
	}
	return nil
}

func (m *MsgCreateVerdict) GetResultingVote() *Vote {
	if m != nil {
		return m.ResultingVote
	}
	return nil
}

type MsgCreateVerdictResponse struct {
}

func (m *MsgCreateVerdictResponse) Reset()         { *m = MsgCreateVerdictResponse{} }
func (m *MsgCreateVerdictResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateVerdictResponse) ProtoMessage()    {}
func (*MsgCreateVerdictResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{19}
}
func (m *MsgCreateVerdictResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateVerdictResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateVerdictResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateVerdictResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateVerdictResponse.Merge(m, src)
}
func (m *MsgCreateVerdictResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateVerdictResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateVerdictResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateVerdictResponse proto.InternalMessageInfo

type MsgUpdateVerdict struct {
	Creator       string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CrowId        string   `protobuf:"bytes,2,opt,name=crowId,proto3" json:"crowId,omitempty"`
	DisputeId     string   `protobuf:"bytes,3,opt,name=disputeId,proto3" json:"disputeId,omitempty"`
	VoteIds       []string `protobuf:"bytes,4,rep,name=voteIds,proto3" json:"voteIds,omitempty"`
	ResultingVote *Vote    `protobuf:"bytes,5,opt,name=resultingVote,proto3" json:"resultingVote,omitempty"`
}

func (m *MsgUpdateVerdict) Reset()         { *m = MsgUpdateVerdict{} }
func (m *MsgUpdateVerdict) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateVerdict) ProtoMessage()    {}
func (*MsgUpdateVerdict) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{20}
}
func (m *MsgUpdateVerdict) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateVerdict) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateVerdict.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateVerdict) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateVerdict.Merge(m, src)
}
func (m *MsgUpdateVerdict) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateVerdict) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateVerdict.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateVerdict proto.InternalMessageInfo

func (m *MsgUpdateVerdict) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateVerdict) GetCrowId() string {
	if m != nil {
		return m.CrowId
	}
	return ""
}

func (m *MsgUpdateVerdict) GetDisputeId() string {
	if m != nil {
		return m.DisputeId
	}
	return ""
}

func (m *MsgUpdateVerdict) GetVoteIds() []string {
	if m != nil {
		return m.VoteIds
	}
	return nil
}

func (m *MsgUpdateVerdict) GetResultingVote() *Vote {
	if m != nil {
		return m.ResultingVote
	}
	return nil
}

type MsgUpdateVerdictResponse struct {
}

func (m *MsgUpdateVerdictResponse) Reset()         { *m = MsgUpdateVerdictResponse{} }
func (m *MsgUpdateVerdictResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateVerdictResponse) ProtoMessage()    {}
func (*MsgUpdateVerdictResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{21}
}
func (m *MsgUpdateVerdictResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateVerdictResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateVerdictResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateVerdictResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateVerdictResponse.Merge(m, src)
}
func (m *MsgUpdateVerdictResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateVerdictResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateVerdictResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateVerdictResponse proto.InternalMessageInfo

type MsgDeleteVerdict struct {
	Creator   string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CrowId    string `protobuf:"bytes,2,opt,name=crowId,proto3" json:"crowId,omitempty"`
	DisputeId string `protobuf:"bytes,3,opt,name=disputeId,proto3" json:"disputeId,omitempty"`
}

func (m *MsgDeleteVerdict) Reset()         { *m = MsgDeleteVerdict{} }
func (m *MsgDeleteVerdict) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteVerdict) ProtoMessage()    {}
func (*MsgDeleteVerdict) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{22}
}
func (m *MsgDeleteVerdict) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteVerdict) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteVerdict.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteVerdict) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteVerdict.Merge(m, src)
}
func (m *MsgDeleteVerdict) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteVerdict) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteVerdict.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteVerdict proto.InternalMessageInfo

func (m *MsgDeleteVerdict) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDeleteVerdict) GetCrowId() string {
	if m != nil {
		return m.CrowId
	}
	return ""
}

func (m *MsgDeleteVerdict) GetDisputeId() string {
	if m != nil {
		return m.DisputeId
	}
	return ""
}

type MsgDeleteVerdictResponse struct {
}

func (m *MsgDeleteVerdictResponse) Reset()         { *m = MsgDeleteVerdictResponse{} }
func (m *MsgDeleteVerdictResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteVerdictResponse) ProtoMessage()    {}
func (*MsgDeleteVerdictResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{23}
}
func (m *MsgDeleteVerdictResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteVerdictResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteVerdictResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteVerdictResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteVerdictResponse.Merge(m, src)
}
func (m *MsgDeleteVerdictResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteVerdictResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteVerdictResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteVerdictResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateCrow)(nil), "crowlabs.gamma.escrow.MsgCreateCrow")
	proto.RegisterType((*MsgCreateCrowResponse)(nil), "crowlabs.gamma.escrow.MsgCreateCrowResponse")
	proto.RegisterType((*MsgUpdateCrow)(nil), "crowlabs.gamma.escrow.MsgUpdateCrow")
	proto.RegisterType((*MsgUpdateCrowResponse)(nil), "crowlabs.gamma.escrow.MsgUpdateCrowResponse")
	proto.RegisterType((*MsgDeleteCrow)(nil), "crowlabs.gamma.escrow.MsgDeleteCrow")
	proto.RegisterType((*MsgDeleteCrowResponse)(nil), "crowlabs.gamma.escrow.MsgDeleteCrowResponse")
	proto.RegisterType((*MsgCreateVote)(nil), "crowlabs.gamma.escrow.MsgCreateVote")
	proto.RegisterType((*MsgCreateVoteResponse)(nil), "crowlabs.gamma.escrow.MsgCreateVoteResponse")
	proto.RegisterType((*MsgUpdateVote)(nil), "crowlabs.gamma.escrow.MsgUpdateVote")
	proto.RegisterType((*MsgUpdateVoteResponse)(nil), "crowlabs.gamma.escrow.MsgUpdateVoteResponse")
	proto.RegisterType((*MsgDeleteVote)(nil), "crowlabs.gamma.escrow.MsgDeleteVote")
	proto.RegisterType((*MsgDeleteVoteResponse)(nil), "crowlabs.gamma.escrow.MsgDeleteVoteResponse")
	proto.RegisterType((*MsgCreateDispute)(nil), "crowlabs.gamma.escrow.MsgCreateDispute")
	proto.RegisterType((*MsgCreateDisputeResponse)(nil), "crowlabs.gamma.escrow.MsgCreateDisputeResponse")
	proto.RegisterType((*MsgUpdateDispute)(nil), "crowlabs.gamma.escrow.MsgUpdateDispute")
	proto.RegisterType((*MsgUpdateDisputeResponse)(nil), "crowlabs.gamma.escrow.MsgUpdateDisputeResponse")
	proto.RegisterType((*MsgDeleteDispute)(nil), "crowlabs.gamma.escrow.MsgDeleteDispute")
	proto.RegisterType((*MsgDeleteDisputeResponse)(nil), "crowlabs.gamma.escrow.MsgDeleteDisputeResponse")
	proto.RegisterType((*MsgCreateVerdict)(nil), "crowlabs.gamma.escrow.MsgCreateVerdict")
	proto.RegisterType((*MsgCreateVerdictResponse)(nil), "crowlabs.gamma.escrow.MsgCreateVerdictResponse")
	proto.RegisterType((*MsgUpdateVerdict)(nil), "crowlabs.gamma.escrow.MsgUpdateVerdict")
	proto.RegisterType((*MsgUpdateVerdictResponse)(nil), "crowlabs.gamma.escrow.MsgUpdateVerdictResponse")
	proto.RegisterType((*MsgDeleteVerdict)(nil), "crowlabs.gamma.escrow.MsgDeleteVerdict")
	proto.RegisterType((*MsgDeleteVerdictResponse)(nil), "crowlabs.gamma.escrow.MsgDeleteVerdictResponse")
}

func init() { proto.RegisterFile("escrow/tx.proto", fileDescriptor_8e01f3e45c7c056c) }

var fileDescriptor_8e01f3e45c7c056c = []byte{
	// 918 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0xcd, 0x6e, 0x13, 0x3b,
	0x14, 0x4e, 0x6e, 0xda, 0xb4, 0x71, 0x6e, 0xd5, 0x5e, 0xab, 0xed, 0x9d, 0x9b, 0x8b, 0x42, 0x14,
	0x21, 0xb5, 0x20, 0x98, 0x51, 0xcb, 0x03, 0x20, 0x9a, 0x02, 0x8a, 0x50, 0x25, 0x14, 0xa0, 0x0b,
	0x56, 0x4c, 0x32, 0x26, 0x1d, 0x69, 0x32, 0x8e, 0xc6, 0x9e, 0xb4, 0x7d, 0x0b, 0x5e, 0x81, 0x97,
	0x60, 0x0b, 0xcb, 0x2e, 0x2b, 0xb1, 0x61, 0x85, 0x50, 0xfb, 0x22, 0xe8, 0xd8, 0x9e, 0x1f, 0x4f,
	0x42, 0x66, 0x84, 0xa8, 0x44, 0xa5, 0x6e, 0xaa, 0x9c, 0xe3, 0xe3, 0xf3, 0xe5, 0x7c, 0xe7, 0xf3,
	0xb1, 0x1b, 0xb4, 0x4a, 0xd8, 0x20, 0xa0, 0xc7, 0x16, 0x3f, 0x31, 0xc7, 0x01, 0xe5, 0x14, 0x6f,
	0x80, 0xe9, 0xd9, 0x7d, 0x66, 0x0e, 0xed, 0xd1, 0xc8, 0x36, 0xe5, 0x7a, 0xe3, 0x1f, 0x15, 0x07,
	0x7f, 0x64, 0x64, 0x63, 0x5d, 0xb9, 0x1c, 0x97, 0x8d, 0x43, 0x4e, 0x32, 0xde, 0x09, 0x09, 0x1c,
	0x77, 0xc0, 0x95, 0x37, 0xda, 0x3e, 0xa1, 0x71, 0x60, 0x73, 0x40, 0xd9, 0x88, 0x32, 0xab, 0x6f,
	0x33, 0x62, 0x4d, 0x76, 0xfa, 0x84, 0xdb, 0x3b, 0xd6, 0x80, 0xba, 0x7e, 0x94, 0x68, 0x48, 0x87,
	0x54, 0x7c, 0xb4, 0xe0, 0x93, 0xf4, 0xb6, 0x3f, 0x57, 0xd0, 0xca, 0x01, 0x1b, 0x76, 0x02, 0x62,
	0x73, 0xd2, 0x09, 0xe8, 0x31, 0x36, 0xd0, 0xd2, 0x00, 0x2c, 0x1a, 0x18, 0xe5, 0x56, 0x79, 0xbb,
	0xd6, 0x8b, 0x4c, 0x7c, 0x0b, 0xd5, 0x3c, 0x97, 0x71, 0xd7, 0x1f, 0x76, 0x1d, 0xe3, 0x2f, 0xb1,
	0x96, 0x38, 0x60, 0x1f, 0x0d, 0x1c, 0x12, 0x74, 0x1d, 0xa3, 0x22, 0xf7, 0x29, 0x13, 0x56, 0xfa,
	0xe1, 0xa9, 0x58, 0x59, 0x90, 0x2b, 0xca, 0xc4, 0x0d, 0xb4, 0xcc, 0x88, 0xe7, 0x89, 0xa5, 0x45,
	0xb1, 0x14, 0xdb, 0xb8, 0x8b, 0x56, 0x45, 0x58, 0x87, 0x7a, 0x9e, 0xcd, 0x49, 0x60, 0x7b, 0x46,
	0xb5, 0x55, 0xd9, 0xae, 0xef, 0xfe, 0x67, 0xca, 0x4a, 0x4d, 0xa8, 0xd4, 0x54, 0x95, 0x9a, 0x1d,
	0xea, 0xfa, 0x7b, 0x0b, 0x67, 0xdf, 0x6e, 0x97, 0x7a, 0xd9, 0x7d, 0xf8, 0x39, 0x5a, 0x93, 0x69,
	0x53, 0xb9, 0x96, 0x8a, 0xe5, 0x9a, 0xda, 0x88, 0x1f, 0x21, 0x24, 0xf2, 0x3f, 0x0d, 0x7d, 0x87,
	0x19, 0xcb, 0xc5, 0xd2, 0xa4, 0xb6, 0xe0, 0x4d, 0x54, 0x65, 0xdc, 0xe6, 0x21, 0x33, 0x6a, 0xa2,
	0x64, 0x65, 0x01, 0x4d, 0xdc, 0x1d, 0x11, 0x1a, 0x72, 0x03, 0xb5, 0x2a, 0x40, 0x93, 0x32, 0x81,
	0x78, 0x25, 0x8a, 0xae, 0x63, 0xd4, 0x25, 0xf1, 0xb1, 0xa3, 0xfd, 0x2f, 0xda, 0xd0, 0x3a, 0xd8,
	0x23, 0x6c, 0x4c, 0x7d, 0x46, 0xa2, 0xde, 0xbe, 0x1e, 0x3b, 0x37, 0xbd, 0xbd, 0xd6, 0xbd, 0x4d,
	0x3a, 0x18, 0xf7, 0xd6, 0x16, 0xad, 0xdd, 0x27, 0x1e, 0xb9, 0xaa, 0xd6, 0x2a, 0xec, 0x04, 0x22,
	0xc6, 0xfe, 0x90, 0x9e, 0x19, 0x87, 0x94, 0x93, 0x39, 0xe0, 0x06, 0x5a, 0x82, 0x19, 0x15, 0xc4,
	0xd0, 0x91, 0xa9, 0x17, 0x5e, 0xc9, 0x14, 0x0e, 0x44, 0x42, 0x60, 0x2c, 0x2b, 0x65, 0xe1, 0x16,
	0xaa, 0x0b, 0xba, 0x9f, 0x85, 0xae, 0xc7, 0x4f, 0x85, 0xb0, 0x96, 0x7b, 0x69, 0x17, 0x6e, 0xa3,
	0xbf, 0x65, 0x5f, 0x55, 0x48, 0x55, 0x84, 0x68, 0x3e, 0xfc, 0x04, 0xad, 0x04, 0xe4, 0x5d, 0xe8,
	0x3b, 0xaf, 0xe8, 0x1e, 0x6c, 0x2d, 0xaa, 0x18, 0x7d, 0x17, 0xee, 0x00, 0x14, 0x98, 0x2f, 0x45,
	0xf2, 0xa2, 0x82, 0xd1, 0x36, 0xe1, 0x6d, 0x75, 0x16, 0x5e, 0x84, 0xbe, 0xcb, 0x8e, 0x46, 0xc4,
	0xe7, 0x4a, 0x3b, 0x59, 0x37, 0xbe, 0x17, 0x49, 0x3d, 0x15, 0x8a, 0x44, 0xe8, 0x94, 0x5f, 0x1b,
	0x0a, 0xd0, 0xa2, 0x6c, 0xf3, 0xa4, 0xa4, 0x6e, 0x9a, 0xf7, 0x07, 0x37, 0x2f, 0x69, 0xd1, 0xcc,
	0x53, 0x7f, 0x35, 0xbd, 0xd3, 0x4e, 0xbd, 0x86, 0xfd, 0xb1, 0x8c, 0xd6, 0x62, 0x49, 0xed, 0xcb,
	0xf8, 0x39, 0xf8, 0x9b, 0xa8, 0x0a, 0x2f, 0x94, 0x18, 0x5e, 0x59, 0x39, 0xca, 0x59, 0x47, 0x8b,
	0xdc, 0xe5, 0x1e, 0x51, 0xc2, 0x91, 0x06, 0xe8, 0xc6, 0x81, 0x07, 0x8f, 0x3b, 0xe6, 0x2e, 0xf5,
	0xd5, 0x6d, 0x92, 0x76, 0xc1, 0x65, 0x43, 0x26, 0xae, 0x43, 0xfc, 0x01, 0x11, 0x9a, 0xa9, 0xf5,
	0x62, 0xbb, 0xdd, 0x40, 0x46, 0xf6, 0x7b, 0x67, 0x8b, 0x92, 0x54, 0x5f, 0xbf, 0xa2, 0xb4, 0xef,
	0x1d, 0x17, 0xb5, 0x2f, 0x6a, 0x92, 0x2d, 0xfc, 0xe5, 0x9a, 0x14, 0x82, 0x96, 0x25, 0x46, 0xf8,
	0x94, 0xd6, 0xc2, 0xa1, 0x7c, 0x99, 0xfe, 0x76, 0xda, 0x94, 0x82, 0xbb, 0x0e, 0x33, 0x16, 0xe4,
	0x9d, 0xa9, 0x4c, 0xfc, 0x18, 0x26, 0x00, 0x0b, 0x3d, 0xb8, 0xc2, 0x40, 0xa3, 0x82, 0xbc, 0xfa,
	0xee, 0xff, 0xe6, 0xcc, 0xb7, 0xb6, 0x29, 0x64, 0xac, 0xef, 0xd0, 0x44, 0xa1, 0x0a, 0xc8, 0x56,
	0xa7, 0xce, 0xdf, 0xf5, 0xad, 0x4e, 0x2b, 0x20, 0xae, 0xae, 0x9f, 0x52, 0xc7, 0x15, 0x15, 0xa7,
	0x69, 0x27, 0x83, 0xbf, 0xfb, 0xa5, 0x86, 0x2a, 0x07, 0x6c, 0x88, 0xdf, 0x22, 0x94, 0xfa, 0xaf,
	0xe3, 0xce, 0x4f, 0xaa, 0xd3, 0x5e, 0xb6, 0x8d, 0xfb, 0x45, 0xa2, 0x22, 0x24, 0x40, 0x48, 0xbd,
	0x7d, 0xe7, 0x20, 0x24, 0x51, 0xf3, 0x10, 0xa6, 0x5f, 0x61, 0x80, 0x90, 0x7a, 0x82, 0xcd, 0x41,
	0x48, 0xa2, 0xe6, 0x21, 0x4c, 0xbf, 0xb5, 0x12, 0x96, 0xc4, 0xb8, 0xcf, 0x65, 0x09, 0xa2, 0xf2,
	0x59, 0x4a, 0xcf, 0xf5, 0x84, 0xa5, 0x3c, 0x84, 0x24, 0x2a, 0x9f, 0xa5, 0x2c, 0x42, 0xea, 0xca,
	0xca, 0x65, 0x29, 0x0f, 0x61, 0xfa, 0x6e, 0xc2, 0x2e, 0x5a, 0xd1, 0xef, 0xa5, 0xad, 0x3c, 0x0a,
	0x54, 0x60, 0xc3, 0x2a, 0x18, 0x98, 0x86, 0xd2, 0x6f, 0x8b, 0xad, 0x3c, 0x2e, 0x0a, 0x40, 0xcd,
	0x9c, 0xe3, 0x00, 0xa5, 0x0f, 0xf1, 0xad, 0x3c, 0x52, 0x0a, 0x40, 0xcd, 0x1c, 0xe8, 0x09, 0x81,
	0xd1, 0x44, 0xc8, 0x25, 0x50, 0x05, 0xe6, 0x13, 0x98, 0x39, 0xff, 0x09, 0x81, 0x05, 0xa0, 0xb4,
	0xc0, 0x7c, 0x02, 0x67, 0x40, 0xe9, 0x73, 0x2e, 0x97, 0xc0, 0x02, 0x50, 0x33, 0xa7, 0xda, 0x5e,
	0xe7, 0xec, 0xa2, 0x59, 0x3e, 0xbf, 0x68, 0x96, 0xbf, 0x5f, 0x34, 0xcb, 0xef, 0x2f, 0x9b, 0xa5,
	0xf3, 0xcb, 0x66, 0xe9, 0xeb, 0x65, 0xb3, 0xf4, 0xe6, 0xee, 0xd0, 0xe5, 0x47, 0x61, 0xdf, 0x1c,
	0xd0, 0x91, 0xf8, 0xb5, 0xe7, 0x01, 0x64, 0xb5, 0x44, 0x56, 0xeb, 0xc4, 0x8a, 0x7e, 0x2e, 0x3a,
	0x1d, 0x13, 0xd6, 0xaf, 0x8a, 0xdf, 0x64, 0x1e, 0xfe, 0x08, 0x00, 0x00, 0xff, 0xff, 0x88, 0x64,
	0x15, 0x94, 0x45, 0x12, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CreateCrow(ctx context.Context, in *MsgCreateCrow, opts ...grpc.CallOption) (*MsgCreateCrowResponse, error)
	UpdateCrow(ctx context.Context, in *MsgUpdateCrow, opts ...grpc.CallOption) (*MsgUpdateCrowResponse, error)
	DeleteCrow(ctx context.Context, in *MsgDeleteCrow, opts ...grpc.CallOption) (*MsgDeleteCrowResponse, error)
	CreateVote(ctx context.Context, in *MsgCreateVote, opts ...grpc.CallOption) (*MsgCreateVoteResponse, error)
	UpdateVote(ctx context.Context, in *MsgUpdateVote, opts ...grpc.CallOption) (*MsgUpdateVoteResponse, error)
	DeleteVote(ctx context.Context, in *MsgDeleteVote, opts ...grpc.CallOption) (*MsgDeleteVoteResponse, error)
	CreateDispute(ctx context.Context, in *MsgCreateDispute, opts ...grpc.CallOption) (*MsgCreateDisputeResponse, error)
	UpdateDispute(ctx context.Context, in *MsgUpdateDispute, opts ...grpc.CallOption) (*MsgUpdateDisputeResponse, error)
	DeleteDispute(ctx context.Context, in *MsgDeleteDispute, opts ...grpc.CallOption) (*MsgDeleteDisputeResponse, error)
	CreateVerdict(ctx context.Context, in *MsgCreateVerdict, opts ...grpc.CallOption) (*MsgCreateVerdictResponse, error)
	UpdateVerdict(ctx context.Context, in *MsgUpdateVerdict, opts ...grpc.CallOption) (*MsgUpdateVerdictResponse, error)
	DeleteVerdict(ctx context.Context, in *MsgDeleteVerdict, opts ...grpc.CallOption) (*MsgDeleteVerdictResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateCrow(ctx context.Context, in *MsgCreateCrow, opts ...grpc.CallOption) (*MsgCreateCrowResponse, error) {
	out := new(MsgCreateCrowResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.gamma.escrow.Msg/CreateCrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateCrow(ctx context.Context, in *MsgUpdateCrow, opts ...grpc.CallOption) (*MsgUpdateCrowResponse, error) {
	out := new(MsgUpdateCrowResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.gamma.escrow.Msg/UpdateCrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteCrow(ctx context.Context, in *MsgDeleteCrow, opts ...grpc.CallOption) (*MsgDeleteCrowResponse, error) {
	out := new(MsgDeleteCrowResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.gamma.escrow.Msg/DeleteCrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateVote(ctx context.Context, in *MsgCreateVote, opts ...grpc.CallOption) (*MsgCreateVoteResponse, error) {
	out := new(MsgCreateVoteResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.gamma.escrow.Msg/CreateVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateVote(ctx context.Context, in *MsgUpdateVote, opts ...grpc.CallOption) (*MsgUpdateVoteResponse, error) {
	out := new(MsgUpdateVoteResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.gamma.escrow.Msg/UpdateVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteVote(ctx context.Context, in *MsgDeleteVote, opts ...grpc.CallOption) (*MsgDeleteVoteResponse, error) {
	out := new(MsgDeleteVoteResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.gamma.escrow.Msg/DeleteVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateDispute(ctx context.Context, in *MsgCreateDispute, opts ...grpc.CallOption) (*MsgCreateDisputeResponse, error) {
	out := new(MsgCreateDisputeResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.gamma.escrow.Msg/CreateDispute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateDispute(ctx context.Context, in *MsgUpdateDispute, opts ...grpc.CallOption) (*MsgUpdateDisputeResponse, error) {
	out := new(MsgUpdateDisputeResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.gamma.escrow.Msg/UpdateDispute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteDispute(ctx context.Context, in *MsgDeleteDispute, opts ...grpc.CallOption) (*MsgDeleteDisputeResponse, error) {
	out := new(MsgDeleteDisputeResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.gamma.escrow.Msg/DeleteDispute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateVerdict(ctx context.Context, in *MsgCreateVerdict, opts ...grpc.CallOption) (*MsgCreateVerdictResponse, error) {
	out := new(MsgCreateVerdictResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.gamma.escrow.Msg/CreateVerdict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateVerdict(ctx context.Context, in *MsgUpdateVerdict, opts ...grpc.CallOption) (*MsgUpdateVerdictResponse, error) {
	out := new(MsgUpdateVerdictResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.gamma.escrow.Msg/UpdateVerdict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteVerdict(ctx context.Context, in *MsgDeleteVerdict, opts ...grpc.CallOption) (*MsgDeleteVerdictResponse, error) {
	out := new(MsgDeleteVerdictResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.gamma.escrow.Msg/DeleteVerdict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CreateCrow(context.Context, *MsgCreateCrow) (*MsgCreateCrowResponse, error)
	UpdateCrow(context.Context, *MsgUpdateCrow) (*MsgUpdateCrowResponse, error)
	DeleteCrow(context.Context, *MsgDeleteCrow) (*MsgDeleteCrowResponse, error)
	CreateVote(context.Context, *MsgCreateVote) (*MsgCreateVoteResponse, error)
	UpdateVote(context.Context, *MsgUpdateVote) (*MsgUpdateVoteResponse, error)
	DeleteVote(context.Context, *MsgDeleteVote) (*MsgDeleteVoteResponse, error)
	CreateDispute(context.Context, *MsgCreateDispute) (*MsgCreateDisputeResponse, error)
	UpdateDispute(context.Context, *MsgUpdateDispute) (*MsgUpdateDisputeResponse, error)
	DeleteDispute(context.Context, *MsgDeleteDispute) (*MsgDeleteDisputeResponse, error)
	CreateVerdict(context.Context, *MsgCreateVerdict) (*MsgCreateVerdictResponse, error)
	UpdateVerdict(context.Context, *MsgUpdateVerdict) (*MsgUpdateVerdictResponse, error)
	DeleteVerdict(context.Context, *MsgDeleteVerdict) (*MsgDeleteVerdictResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateCrow(ctx context.Context, req *MsgCreateCrow) (*MsgCreateCrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCrow not implemented")
}
func (*UnimplementedMsgServer) UpdateCrow(ctx context.Context, req *MsgUpdateCrow) (*MsgUpdateCrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCrow not implemented")
}
func (*UnimplementedMsgServer) DeleteCrow(ctx context.Context, req *MsgDeleteCrow) (*MsgDeleteCrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCrow not implemented")
}
func (*UnimplementedMsgServer) CreateVote(ctx context.Context, req *MsgCreateVote) (*MsgCreateVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVote not implemented")
}
func (*UnimplementedMsgServer) UpdateVote(ctx context.Context, req *MsgUpdateVote) (*MsgUpdateVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVote not implemented")
}
func (*UnimplementedMsgServer) DeleteVote(ctx context.Context, req *MsgDeleteVote) (*MsgDeleteVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVote not implemented")
}
func (*UnimplementedMsgServer) CreateDispute(ctx context.Context, req *MsgCreateDispute) (*MsgCreateDisputeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDispute not implemented")
}
func (*UnimplementedMsgServer) UpdateDispute(ctx context.Context, req *MsgUpdateDispute) (*MsgUpdateDisputeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDispute not implemented")
}
func (*UnimplementedMsgServer) DeleteDispute(ctx context.Context, req *MsgDeleteDispute) (*MsgDeleteDisputeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDispute not implemented")
}
func (*UnimplementedMsgServer) CreateVerdict(ctx context.Context, req *MsgCreateVerdict) (*MsgCreateVerdictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVerdict not implemented")
}
func (*UnimplementedMsgServer) UpdateVerdict(ctx context.Context, req *MsgUpdateVerdict) (*MsgUpdateVerdictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVerdict not implemented")
}
func (*UnimplementedMsgServer) DeleteVerdict(ctx context.Context, req *MsgDeleteVerdict) (*MsgDeleteVerdictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVerdict not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateCrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateCrow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateCrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.gamma.escrow.Msg/CreateCrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateCrow(ctx, req.(*MsgCreateCrow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateCrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateCrow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateCrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.gamma.escrow.Msg/UpdateCrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateCrow(ctx, req.(*MsgUpdateCrow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteCrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteCrow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteCrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.gamma.escrow.Msg/DeleteCrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteCrow(ctx, req.(*MsgDeleteCrow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.gamma.escrow.Msg/CreateVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateVote(ctx, req.(*MsgCreateVote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.gamma.escrow.Msg/UpdateVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateVote(ctx, req.(*MsgUpdateVote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.gamma.escrow.Msg/DeleteVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteVote(ctx, req.(*MsgDeleteVote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateDispute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateDispute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateDispute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.gamma.escrow.Msg/CreateDispute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateDispute(ctx, req.(*MsgCreateDispute))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateDispute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateDispute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateDispute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.gamma.escrow.Msg/UpdateDispute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateDispute(ctx, req.(*MsgUpdateDispute))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteDispute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteDispute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteDispute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.gamma.escrow.Msg/DeleteDispute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteDispute(ctx, req.(*MsgDeleteDispute))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateVerdict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateVerdict)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateVerdict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.gamma.escrow.Msg/CreateVerdict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateVerdict(ctx, req.(*MsgCreateVerdict))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateVerdict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateVerdict)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateVerdict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.gamma.escrow.Msg/UpdateVerdict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateVerdict(ctx, req.(*MsgUpdateVerdict))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteVerdict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteVerdict)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteVerdict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.gamma.escrow.Msg/DeleteVerdict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteVerdict(ctx, req.(*MsgDeleteVerdict))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "crowlabs.gamma.escrow.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCrow",
			Handler:    _Msg_CreateCrow_Handler,
		},
		{
			MethodName: "UpdateCrow",
			Handler:    _Msg_UpdateCrow_Handler,
		},
		{
			MethodName: "DeleteCrow",
			Handler:    _Msg_DeleteCrow_Handler,
		},
		{
			MethodName: "CreateVote",
			Handler:    _Msg_CreateVote_Handler,
		},
		{
			MethodName: "UpdateVote",
			Handler:    _Msg_UpdateVote_Handler,
		},
		{
			MethodName: "DeleteVote",
			Handler:    _Msg_DeleteVote_Handler,
		},
		{
			MethodName: "CreateDispute",
			Handler:    _Msg_CreateDispute_Handler,
		},
		{
			MethodName: "UpdateDispute",
			Handler:    _Msg_UpdateDispute_Handler,
		},
		{
			MethodName: "DeleteDispute",
			Handler:    _Msg_DeleteDispute_Handler,
		},
		{
			MethodName: "CreateVerdict",
			Handler:    _Msg_CreateVerdict_Handler,
		},
		{
			MethodName: "UpdateVerdict",
			Handler:    _Msg_UpdateVerdict_Handler,
		},
		{
			MethodName: "DeleteVerdict",
			Handler:    _Msg_DeleteVerdict_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "escrow/tx.proto",
}

func (m *MsgCreateCrow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateCrow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateCrow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DisputeId) > 0 {
		i -= len(m.DisputeId)
		copy(dAtA[i:], m.DisputeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DisputeId)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Timeout) > 0 {
		for iNdEx := len(m.Timeout) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Timeout[iNdEx])
			copy(dAtA[i:], m.Timeout[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Timeout[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.BuyerFunds) > 0 {
		for iNdEx := len(m.BuyerFunds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BuyerFunds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.SellerCollateral) > 0 {
		for iNdEx := len(m.SellerCollateral) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SellerCollateral[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.BuyerCollateral) > 0 {
		for iNdEx := len(m.BuyerCollateral) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BuyerCollateral[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.SellerId) > 0 {
		i -= len(m.SellerId)
		copy(dAtA[i:], m.SellerId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SellerId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BuyerId) > 0 {
		i -= len(m.BuyerId)
		copy(dAtA[i:], m.BuyerId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BuyerId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ListingId) > 0 {
		i -= len(m.ListingId)
		copy(dAtA[i:], m.ListingId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ListingId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateCrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateCrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateCrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateCrow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateCrow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateCrow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DisputeId) > 0 {
		i -= len(m.DisputeId)
		copy(dAtA[i:], m.DisputeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DisputeId)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Timeout) > 0 {
		for iNdEx := len(m.Timeout) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Timeout[iNdEx])
			copy(dAtA[i:], m.Timeout[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Timeout[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.BuyerFunds) > 0 {
		for iNdEx := len(m.BuyerFunds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BuyerFunds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.SellerCollateral) > 0 {
		for iNdEx := len(m.SellerCollateral) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SellerCollateral[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.BuyerCollateral) > 0 {
		for iNdEx := len(m.BuyerCollateral) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BuyerCollateral[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.SellerId) > 0 {
		i -= len(m.SellerId)
		copy(dAtA[i:], m.SellerId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SellerId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BuyerId) > 0 {
		i -= len(m.BuyerId)
		copy(dAtA[i:], m.BuyerId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BuyerId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ListingId) > 0 {
		i -= len(m.ListingId)
		copy(dAtA[i:], m.ListingId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ListingId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateCrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateCrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateCrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteCrow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteCrow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteCrow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ListingId) > 0 {
		i -= len(m.ListingId)
		copy(dAtA[i:], m.ListingId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ListingId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteCrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteCrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteCrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SellerPunishment) > 0 {
		i -= len(m.SellerPunishment)
		copy(dAtA[i:], m.SellerPunishment)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SellerPunishment)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.BuyerPunishment) > 0 {
		i -= len(m.BuyerPunishment)
		copy(dAtA[i:], m.BuyerPunishment)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BuyerPunishment)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.SendToSeller) > 0 {
		for iNdEx := len(m.SendToSeller) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SendToSeller[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.RefundToBuyer) > 0 {
		for iNdEx := len(m.RefundToBuyer) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RefundToBuyer[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.SellerGuilty {
		i--
		if m.SellerGuilty {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.BuyerGuilty {
		i--
		if m.BuyerGuilty {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.VoteId) > 0 {
		i -= len(m.VoteId)
		copy(dAtA[i:], m.VoteId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VoteId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DisputeId) > 0 {
		i -= len(m.DisputeId)
		copy(dAtA[i:], m.DisputeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DisputeId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VoterId) > 0 {
		i -= len(m.VoterId)
		copy(dAtA[i:], m.VoterId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VoterId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateVoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateVoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateVoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SellerPunishment) > 0 {
		i -= len(m.SellerPunishment)
		copy(dAtA[i:], m.SellerPunishment)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SellerPunishment)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.BuyerPunishment) > 0 {
		i -= len(m.BuyerPunishment)
		copy(dAtA[i:], m.BuyerPunishment)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BuyerPunishment)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.SendToSeller) > 0 {
		for iNdEx := len(m.SendToSeller) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SendToSeller[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.RefundToBuyer) > 0 {
		for iNdEx := len(m.RefundToBuyer) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RefundToBuyer[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.SellerGuilty {
		i--
		if m.SellerGuilty {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.BuyerGuilty {
		i--
		if m.BuyerGuilty {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.VoteId) > 0 {
		i -= len(m.VoteId)
		copy(dAtA[i:], m.VoteId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VoteId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DisputeId) > 0 {
		i -= len(m.DisputeId)
		copy(dAtA[i:], m.DisputeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DisputeId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VoterId) > 0 {
		i -= len(m.VoterId)
		copy(dAtA[i:], m.VoterId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VoterId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateVoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateVoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateVoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DisputeId) > 0 {
		i -= len(m.DisputeId)
		copy(dAtA[i:], m.DisputeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DisputeId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VoterId) > 0 {
		i -= len(m.VoterId)
		copy(dAtA[i:], m.VoterId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VoterId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteVoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteVoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteVoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateDispute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateDispute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateDispute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Evidence) > 0 {
		i -= len(m.Evidence)
		copy(dAtA[i:], m.Evidence)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Evidence)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DisputeId) > 0 {
		i -= len(m.DisputeId)
		copy(dAtA[i:], m.DisputeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DisputeId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CrowId) > 0 {
		i -= len(m.CrowId)
		copy(dAtA[i:], m.CrowId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CrowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateDisputeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateDisputeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateDisputeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateDispute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateDispute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateDispute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Evidence) > 0 {
		i -= len(m.Evidence)
		copy(dAtA[i:], m.Evidence)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Evidence)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DisputeId) > 0 {
		i -= len(m.DisputeId)
		copy(dAtA[i:], m.DisputeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DisputeId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CrowId) > 0 {
		i -= len(m.CrowId)
		copy(dAtA[i:], m.CrowId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CrowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateDisputeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateDisputeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateDisputeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteDispute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteDispute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteDispute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CrowId) > 0 {
		i -= len(m.CrowId)
		copy(dAtA[i:], m.CrowId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CrowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteDisputeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteDisputeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteDisputeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateVerdict) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateVerdict) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateVerdict) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ResultingVote != nil {
		{
			size, err := m.ResultingVote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.VoteIds) > 0 {
		for iNdEx := len(m.VoteIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.VoteIds[iNdEx])
			copy(dAtA[i:], m.VoteIds[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.VoteIds[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.DisputeId) > 0 {
		i -= len(m.DisputeId)
		copy(dAtA[i:], m.DisputeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DisputeId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CrowId) > 0 {
		i -= len(m.CrowId)
		copy(dAtA[i:], m.CrowId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CrowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateVerdictResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateVerdictResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateVerdictResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateVerdict) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateVerdict) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateVerdict) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ResultingVote != nil {
		{
			size, err := m.ResultingVote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.VoteIds) > 0 {
		for iNdEx := len(m.VoteIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.VoteIds[iNdEx])
			copy(dAtA[i:], m.VoteIds[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.VoteIds[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.DisputeId) > 0 {
		i -= len(m.DisputeId)
		copy(dAtA[i:], m.DisputeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DisputeId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CrowId) > 0 {
		i -= len(m.CrowId)
		copy(dAtA[i:], m.CrowId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CrowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateVerdictResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateVerdictResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateVerdictResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteVerdict) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteVerdict) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteVerdict) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DisputeId) > 0 {
		i -= len(m.DisputeId)
		copy(dAtA[i:], m.DisputeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DisputeId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CrowId) > 0 {
		i -= len(m.CrowId)
		copy(dAtA[i:], m.CrowId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CrowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteVerdictResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteVerdictResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteVerdictResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateCrow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ListingId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BuyerId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SellerId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.BuyerCollateral) > 0 {
		for _, e := range m.BuyerCollateral {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.SellerCollateral) > 0 {
		for _, e := range m.SellerCollateral {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.BuyerFunds) > 0 {
		for _, e := range m.BuyerFunds {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Timeout) > 0 {
		for _, s := range m.Timeout {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.DisputeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateCrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateCrow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ListingId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BuyerId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SellerId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.BuyerCollateral) > 0 {
		for _, e := range m.BuyerCollateral {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.SellerCollateral) > 0 {
		for _, e := range m.SellerCollateral {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.BuyerFunds) > 0 {
		for _, e := range m.BuyerFunds {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Timeout) > 0 {
		for _, s := range m.Timeout {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.DisputeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateCrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteCrow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ListingId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteCrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VoterId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DisputeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VoteId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BuyerGuilty {
		n += 2
	}
	if m.SellerGuilty {
		n += 2
	}
	if len(m.RefundToBuyer) > 0 {
		for _, e := range m.RefundToBuyer {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.SendToSeller) > 0 {
		for _, e := range m.SendToSeller {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.BuyerPunishment)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SellerPunishment)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateVoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VoterId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DisputeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VoteId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BuyerGuilty {
		n += 2
	}
	if m.SellerGuilty {
		n += 2
	}
	if len(m.RefundToBuyer) > 0 {
		for _, e := range m.RefundToBuyer {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.SendToSeller) > 0 {
		for _, e := range m.SendToSeller {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.BuyerPunishment)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SellerPunishment)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateVoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VoterId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DisputeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteVoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateDispute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CrowId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DisputeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Evidence)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateDisputeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateDispute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CrowId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DisputeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Evidence)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateDisputeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteDispute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CrowId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteDisputeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateVerdict) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CrowId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DisputeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.VoteIds) > 0 {
		for _, s := range m.VoteIds {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.ResultingVote != nil {
		l = m.ResultingVote.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateVerdictResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateVerdict) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CrowId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DisputeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.VoteIds) > 0 {
		for _, s := range m.VoteIds {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.ResultingVote != nil {
		l = m.ResultingVote.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateVerdictResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteVerdict) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CrowId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DisputeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteVerdictResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateCrow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateCrow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateCrow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerCollateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerCollateral = append(m.BuyerCollateral, types.Coin{})
			if err := m.BuyerCollateral[len(m.BuyerCollateral)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerCollateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerCollateral = append(m.SellerCollateral, types.Coin{})
			if err := m.SellerCollateral[len(m.SellerCollateral)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerFunds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerFunds = append(m.BuyerFunds, types.Coin{})
			if err := m.BuyerFunds[len(m.BuyerFunds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timeout = append(m.Timeout, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisputeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateCrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateCrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateCrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateCrow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateCrow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateCrow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerCollateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerCollateral = append(m.BuyerCollateral, types.Coin{})
			if err := m.BuyerCollateral[len(m.BuyerCollateral)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerCollateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerCollateral = append(m.SellerCollateral, types.Coin{})
			if err := m.SellerCollateral[len(m.SellerCollateral)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerFunds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerFunds = append(m.BuyerFunds, types.Coin{})
			if err := m.BuyerFunds[len(m.BuyerFunds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timeout = append(m.Timeout, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisputeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateCrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateCrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateCrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteCrow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteCrow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteCrow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteCrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteCrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteCrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisputeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerGuilty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BuyerGuilty = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerGuilty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SellerGuilty = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundToBuyer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefundToBuyer = append(m.RefundToBuyer, types.Coin{})
			if err := m.RefundToBuyer[len(m.RefundToBuyer)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendToSeller", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendToSeller = append(m.SendToSeller, types.Coin{})
			if err := m.SendToSeller[len(m.SendToSeller)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerPunishment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerPunishment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerPunishment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerPunishment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateVoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateVoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateVoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisputeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerGuilty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BuyerGuilty = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerGuilty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SellerGuilty = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundToBuyer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefundToBuyer = append(m.RefundToBuyer, types.Coin{})
			if err := m.RefundToBuyer[len(m.RefundToBuyer)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendToSeller", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendToSeller = append(m.SendToSeller, types.Coin{})
			if err := m.SendToSeller[len(m.SendToSeller)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerPunishment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerPunishment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerPunishment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerPunishment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateVoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateVoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateVoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisputeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteVoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteVoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteVoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateDispute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateDispute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateDispute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisputeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evidence", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Evidence = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateDisputeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateDisputeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateDisputeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateDispute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateDispute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateDispute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisputeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evidence", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Evidence = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateDisputeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateDisputeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateDisputeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteDispute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteDispute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteDispute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteDisputeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteDisputeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteDisputeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateVerdict) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateVerdict: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateVerdict: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisputeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteIds = append(m.VoteIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultingVote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResultingVote == nil {
				m.ResultingVote = &Vote{}
			}
			if err := m.ResultingVote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateVerdictResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateVerdictResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateVerdictResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateVerdict) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateVerdict: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateVerdict: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisputeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteIds = append(m.VoteIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultingVote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResultingVote == nil {
				m.ResultingVote = &Vote{}
			}
			if err := m.ResultingVote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateVerdictResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateVerdictResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateVerdictResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteVerdict) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteVerdict: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteVerdict: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisputeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteVerdictResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteVerdictResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteVerdictResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
